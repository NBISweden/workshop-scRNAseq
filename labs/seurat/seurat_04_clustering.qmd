---
title: "{{< meta clust_title >}}"
subtitle: "{{< meta subtitle_seurat >}}"
description: "{{< meta clust_description >}}"
format: html
---

::: {.callout-note}
Code chunks run R commands unless otherwise specified.
:::

{{< meta clust_1 >}}

{{< meta clust_2 >}}

```{r}
#| label: libraries
suppressPackageStartupMessages({
    library(Seurat)
    library(patchwork)
    library(ggplot2)
    library(pheatmap)
    library(clustree)
})
```

```{r}
#| label: fetch-data

# download pre-computed data if missing or long compute
fetch_data <- TRUE

# url for source and intermediate data
path_data <- "https://nextcloud.dc.scilifelab.se/public.php/webdav"
curl_upass <- "-u zbC5fr2LbEZ9rSE:scRNAseq2025"

path_file <- "data/covid/results/seurat_covid_qc_dr_int.rds"
if (!dir.exists(dirname(path_file))) dir.create(dirname(path_file), recursive = TRUE)
if (fetch_data && !file.exists(path_file)) download.file(url = file.path(path_data, "covid/results_seurat/seurat_covid_qc_dr_int.rds"), destfile = path_file, method = "curl", extra = curl_upass)

alldata <- readRDS(path_file)
print(names(alldata@reductions))
```

## {{< meta clust_graphclust >}}

{{< meta clust_graphclust_1 >}}

### {{< meta clust_graphclust_knn >}}

{{< meta clust_graphclust_knn_1 >}}

As we can see above, the **Seurat** function `FindNeighbors()` already computes both the KNN and SNN graphs, in which we can control the minimal percentage of shared neighbours to be kept. See `?FindNeighbors` for additional options.

The main options to consider are:

* **dims** - the number of dimensions from the initial reduction to include when calculating distances between cells.
* **k.param** - the number of neighbors per cell to include in the KNN graph.
* **prune.SNN** - sets the cutoff for Jaccard index when pruning the graph.

```{r}
#| label: neighbors

# use the CCA integration to create the neighborhood graph.
alldata <- FindNeighbors(alldata, dims = 1:30, k.param = 60, prune.SNN = 1 / 15, reduction =  "integrated_cca")

# check the names for graphs in the object.
names(alldata@graphs)
```

{{< meta clust_graphclust_knn_2 >}}

```{r}
#| label: plot-graph
#| fig-height: 6
#| fig-width: 6

pheatmap(alldata@graphs$RNA_nn[1:200, 1:200],
    col = c("white", "black"), border_color = "grey90", main = "KNN graph",
    legend = F, cluster_rows = F, cluster_cols = F, fontsize = 2
)

pheatmap(alldata@graphs$RNA_snn[1:200, 1:200],
    col = colorRampPalette(c("white", "yellow", "red"))(100),
    border_color = "grey90", main = "SNN graph",
    legend = F, cluster_rows = F, cluster_cols = F, fontsize = 2
)
```

### {{< meta clust_graphclust_graph >}}

{{< meta clust_graphclust_graph_1 >}}

In **Seurat**, the function `FindClusters()` will do a graph-based clustering using "Louvain" algorithim by default (`algorithm = 1`). To use the leiden algorithm, you need to set it to `algorithm = 4`. See `?FindClusters` for additional options.

By default it will run clustering on the SNN graph we created in the previous step, but you can also specify different graphs for clustering with `graph.name`. 

```{r}
#| label: graph-clust
#| fig-height: 4
#| fig-width: 12
#| results: hide

# Clustering with louvain (algorithm 1) and a few different resolutions
for (res in c(0.1, 0.25, .5, 1, 1.5, 2)) {
    alldata <- FindClusters(alldata, graph.name = "RNA_snn", resolution = res, algorithm = 1)
}

# each time you run clustering, the data is stored in meta data columns:
# seurat_clusters - lastest results only
# RNA_snn_res.XX - for each different resolution you test.
```

```{r}
#| label: plot-graph-clust
#| fig-height: 8
#| fig-width: 14

wrap_plots(
    DimPlot(alldata, reduction = "umap_cca", group.by = "RNA_snn_res.0.1") + ggtitle("louvain_0.1"),
    DimPlot(alldata, reduction = "umap_cca", group.by = "RNA_snn_res.0.25") + ggtitle("louvain_0.25"),
    DimPlot(alldata, reduction = "umap_cca", group.by = "RNA_snn_res.0.5") + ggtitle("louvain_0.5"),
    DimPlot(alldata, reduction = "umap_cca", group.by = "RNA_snn_res.1") + ggtitle("louvain_1"),
    DimPlot(alldata, reduction = "umap_cca", group.by = "RNA_snn_res.2") + ggtitle("louvain_2"),
    ncol = 3
)
```

{{< meta clust_graphclust_graph_2 >}}

```{r}
#| label: clustree
#| fig-height: 8
#| fig-width: 8

suppressPackageStartupMessages(library(clustree))
clustree(alldata@meta.data, prefix = "RNA_snn_res.")
```

## {{< meta clust_kmean >}}

{{< meta clust_kmean_1 >}}

```{r}
#| label: kmeans
#| fig-height: 4
#| fig-width: 13

for (k in c(5, 7, 10, 12, 15, 17, 20)) {
    alldata@meta.data[, paste0("kmeans_", k)] <- kmeans(x = Embeddings(alldata, "integrated_cca"), centers = k, nstart = 100)$cluster
}

wrap_plots(
    DimPlot(alldata, reduction = "umap_cca", group.by = "kmeans_5") + ggtitle("kmeans_5"),
    DimPlot(alldata, reduction = "umap_cca", group.by = "kmeans_10") + ggtitle("kmeans_10"),
    DimPlot(alldata, reduction = "umap_cca", group.by = "kmeans_15") + ggtitle("kmeans_15"),
    ncol = 3
)
```

```{r}
#| label: clustree-kmeans
#| fig-height: 8
#| fig-width: 8

clustree(alldata@meta.data, prefix = "kmeans_")
```

## {{< meta clust_hier >}}

### {{< meta clust_hier_dist >}}

{{< meta clust_hier_dist_1 >}}

```{r}
#| label: hc-dist

d <- dist(Embeddings(alldata, "integrated_cca"), method = "euclidean")
```

{{< meta clust_hier_dist_2 >}}

```{r}
#| label: hc-dist2

# Compute sample correlations
sample_cor <- cor(Matrix::t(Embeddings(alldata, "integrated_cca")))

# Transform the scale from correlations
sample_cor <- (1 - sample_cor) / 2

# Convert it to a distance object
d2 <- as.dist(sample_cor)
```

### {{< meta clust_hier_clust >}}

{{< meta clust_hier_clust_1 >}}

```{r}
#| label: hc

# euclidean
h_euclidean <- hclust(d, method = "ward.D2")

# correlation
h_correlation <- hclust(d2, method = "ward.D2")
```

{{< meta clust_hier_clust_2 >}}

```{r}
#| label: plot-hc
#| fig-height: 8
#| fig-width: 14

# euclidean distance
alldata$hc_euclidean_5 <- cutree(h_euclidean, k = 5)
alldata$hc_euclidean_10 <- cutree(h_euclidean, k = 10)
alldata$hc_euclidean_15 <- cutree(h_euclidean, k = 15)

# correlation distance
alldata$hc_corelation_5 <- cutree(h_correlation, k = 5)
alldata$hc_corelation_10 <- cutree(h_correlation, k = 10)
alldata$hc_corelation_15 <- cutree(h_correlation, k = 15)

wrap_plots(
    DimPlot(alldata, reduction = "umap_cca", group.by = "hc_euclidean_5") + ggtitle("hc_euc_5"),
    DimPlot(alldata, reduction = "umap_cca", group.by = "hc_euclidean_10") + ggtitle("hc_euc_10"),
    DimPlot(alldata, reduction = "umap_cca", group.by = "hc_euclidean_15") + ggtitle("hc_euc_15"),
    DimPlot(alldata, reduction = "umap_cca", group.by = "hc_corelation_5") + ggtitle("hc_cor_5"),
    DimPlot(alldata, reduction = "umap_cca", group.by = "hc_corelation_10") + ggtitle("hc_cor_10"),
    DimPlot(alldata, reduction = "umap_cca", group.by = "hc_corelation_15") + ggtitle("hc_cor_15"),
    ncol = 3
) + plot_layout()
```

{{< meta clust_save >}}

```{r}
#| label: save

saveRDS(alldata, "data/covid/results/seurat_covid_qc_dr_int_cl.rds")
```

## {{< meta clust_distribution >}}

{{< meta clust_distribution_1 >}}

Select the **RNA_snn_res.0.5** and plot proportion of samples per cluster and also proportion covid vs ctrl. 

```{r}
#| label: clust-distribution
#| fig-height: 4
#| fig-width: 9

p1 <- ggplot(alldata@meta.data, aes(x = RNA_snn_res.0.5, fill = orig.ident)) +
    geom_bar(position = "fill")
p2 <- ggplot(alldata@meta.data, aes(x = RNA_snn_res.0.5, fill = type)) +
    geom_bar(position = "fill")

p1 + p2
```

{{< meta clust_distribution_2 >}}

{{< meta clust_distribution_3 >}}

```{r}
#| label: clust-distribution2
ggplot(alldata@meta.data, aes(x = orig.ident, fill = RNA_snn_res.0.5)) +
    geom_bar(position = "fill")
```

:::{.callout-note title="Discuss"}
{{< meta clust_3 >}}
:::

```{r}
#| label: plot-qc
#| fig-height: 4
#| fig-width: 9

VlnPlot(alldata, group.by = "RNA_snn_res.0.5", features = c("nFeature_RNA", "percent_mito"))
```

{{< meta clust_4 >}}


## {{< meta clust_sub >}}

{{< meta clust_sub_1 >}}

{{< meta clust_sub_2 >}}

```{r}
#| label: plot-tcells
#| fig-height: 9
#| fig-width: 14

# check with the lowest resolution
p1 = DimPlot(alldata, reduction = "umap_cca", group.by = "RNA_snn_res.0.1", label = T) + ggtitle("louvain_0.1")
p2 = FeaturePlot(alldata, features = "CD3E", reduction = "umap_cca", order = T) 
p3 = FeaturePlot(alldata, features = "CD4", reduction = "umap_cca", order = T) 
p4 = FeaturePlot(alldata, features = "CD8A", reduction = "umap_cca", order = T) 
p5 = FeaturePlot(alldata, features = "GNLY", reduction = "umap_cca", order = T) 


wrap_plots(p1,p2,p3,p4,p5, ncol=3) + plot_layout(guides = "collect")
```
We can clearly see what clusters are T-cell clusters, so lets subset the data for those cells

```{r}
#| label: select-tcells
tcells = alldata[,alldata$RNA_snn_res.0.1 %in% c(0,3)]

table(tcells$orig.ident)
```

{{< meta clust_sub_3 >}}

```{r}
tcells = FindVariableFeatures(tcells, verbose = FALSE)

# check overlap with the variable genes using all the data
length(intersect(VariableFeatures(alldata), VariableFeatures(tcells)))
```
{{< meta clust_sub_4 >}}

{{< meta clust_sub_5 >}}

```{r}
#| label: subcluster

# run all the steps from before:
tcells = ScaleData(tcells, vars.to.regress = c("percent_mito", "nFeature_RNA"), assay = "RNA")
tcells = RunPCA(tcells, npcs = 50, verbose = F)

tcells <- IntegrateLayers(object = tcells, 
                           method = CCAIntegration, orig.reduction = "pca", 
                           new.reduction = "integrated_tcells", verbose = FALSE)

tcells <- RunUMAP(tcells, reduction = "integrated_tcells", dims = 1:30, reduction.name = "umap_tcells")

tcells <- FindNeighbors(tcells, reduction = "integrated_tcells", dims = 1:30)
tcells <- FindClusters(tcells, graph.name = "RNA_snn", resolution = 0.5, algorithm = 1, cluster.name = "tcell_0.5")
```

```{r}
#| label: plot-subcluster
#| fig-height: 6
#| fig-width: 10

wrap_plots(
  DimPlot(tcells, reduction = "umap_cca", group.by = "orig.ident")+NoAxes()+ggtitle("Full umap"),
  DimPlot(tcells, reduction = "umap_cca", group.by = "RNA_snn_res.0.5", label = T)+NoAxes()+ggtitle("Full umap, full clust"),
  DimPlot(tcells, reduction = "umap_cca", group.by = "tcell_0.5", label = T)+NoAxes()+ggtitle("Full umap, T-cell clust"),
  DimPlot(tcells, reduction = "umap_tcells", group.by = "orig.ident")+NoAxes()+ggtitle("T-cell umap, T-cell clust"),
  DimPlot(tcells, reduction = "umap_tcells", group.by = "RNA_snn_res.0.5")+NoAxes()+ggtitle("T-cell umap, full clust"),
  DimPlot(tcells, reduction = "umap_tcells", group.by = "tcell_0.5", label = T)+NoAxes()+ggtitle("T-cell umap"),  
  ncol = 3
) + plot_layout(guides = "collect")
```

As you can see, we do have some new clusters that did not stand out before (clusters 6,7). But in general the separation looks very similar.

Lets also have a look at some genes in the new umap:

```{r}
#| label: subcluster-gene-plot

wrap_plots(
  FeaturePlot(tcells, features = "CD3E", reduction = "umap_tcells", order = T), 
  FeaturePlot(tcells, features = "CD4", reduction = "umap_tcells", order = T), 
  FeaturePlot(tcells, features = "CD8A", reduction = "umap_tcells", order = T), 
  FeaturePlot(tcells, features = "GNLY", reduction = "umap_tcells", order = T), 
  ncol = 2
) + plot_layout(guides = "collect")

```


## {{< meta session >}}

<details>
  <summary>Click here</summary>

```{r}
#| label: session

sessionInfo()
```

</details>
