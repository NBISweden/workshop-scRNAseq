---
title: "{{< meta qc_title >}}"
subtitle: "{{< meta subtitle_seurat >}}"
description: "{{< meta qc_description >}}"
format: html
---

::: {.callout-note}
Code chunks run R commands unless otherwise specified.
:::

## {{< meta qc_data >}}

{{< meta qc_data_1 >}}

```{r}
#| label: paths

# download pre-computed annotation
fetch_annotation <- TRUE

# url for source and intermediate data
path_data <- "https://nextcloud.dc.scilifelab.se/public.php/webdav"
curl_upass <- "-u zbC5fr2LbEZ9rSE:scRNAseq2025"

path_covid <- "./data/covid/raw"
if (!dir.exists(path_covid)) dir.create(path_covid, recursive = T)

path_results <- "./data/covid/results"
if (!dir.exists(path_results)) dir.create(path_results, recursive = T)
```

```{r}
#| label: fetch-data

file_list <- c(
    "normal_pbmc_13.h5", "normal_pbmc_14.h5", "normal_pbmc_19.h5", "normal_pbmc_5.h5",
    "ncov_pbmc_15.h5", "ncov_pbmc_16.h5", "ncov_pbmc_17.h5", "ncov_pbmc_1.h5"
)

for (i in file_list) {
    path_file <- file.path(path_covid, i)
    if (!file.exists(path_file)) {
        download.file(url = file.path(file.path(path_data, "covid/raw"), i),
		      destfile = path_file, method = "curl", extra = curl_upass)
    }
}
```

{{< meta qc_data_2 >}}

```{r}
#| label: libraries


suppressPackageStartupMessages({
    library(Seurat)
    library(Matrix)
    library(ggplot2)
    library(patchwork)
    # remotes::install_github("chris-mcginnis-ucsf/DoubletFinder", upgrade = FALSE, dependencies = TRUE)
    library(DoubletFinder)
})
```

{{< meta qc_data_3 >}}

```{r}
#| label: read

cov.15 <- Seurat::Read10X_h5(
    filename = file.path(path_covid, "ncov_pbmc_15.h5"),
    use.names = T
)
cov.1 <- Seurat::Read10X_h5(
    filename = file.path(path_covid, "ncov_pbmc_1.h5"),
    use.names = T
)
cov.16 <- Seurat::Read10X_h5(
    filename = file.path(path_covid, "ncov_pbmc_16.h5"),
    use.names = T
)
cov.17 <- Seurat::Read10X_h5(
    filename = file.path(path_covid, "ncov_pbmc_17.h5"),
    use.names = T
)

ctrl.5 <- Seurat::Read10X_h5(
    filename = file.path(path_covid, "normal_pbmc_5.h5"),
    use.names = T
)
ctrl.13 <- Seurat::Read10X_h5(
    filename = file.path(path_covid, "normal_pbmc_13.h5"),
    use.names = T
)
ctrl.14 <- Seurat::Read10X_h5(
    filename = file.path(path_covid, "normal_pbmc_14.h5"),
    use.names = T
)
ctrl.19 <- Seurat::Read10X_h5(
    filename = file.path(path_covid, "normal_pbmc_19.h5"),
    use.names = T
)
```

## {{< meta qc_collate >}}

{{< meta qc_collate_1 >}}

But first, we need to create Seurat objects using each of the expression matrices we loaded. We define each sample in the `project` slot, so in each object, the sample id can be found in the metadata slot `orig.ident`.

```{r}
#| label: create-seurat

sdata.cov1 <- CreateSeuratObject(cov.1, project = "covid_1")
sdata.cov15 <- CreateSeuratObject(cov.15, project = "covid_15")
sdata.cov17 <- CreateSeuratObject(cov.17, project = "covid_17")
sdata.cov16 <- CreateSeuratObject(cov.16, project = "covid_16")
sdata.ctrl5 <- CreateSeuratObject(ctrl.5, project = "ctrl_5")
sdata.ctrl13 <- CreateSeuratObject(ctrl.13, project = "ctrl_13")
sdata.ctrl14 <- CreateSeuratObject(ctrl.14, project = "ctrl_14")
sdata.ctrl19 <- CreateSeuratObject(ctrl.19, project = "ctrl_19")


# add metadata
sdata.cov1$type <- "Covid"
sdata.cov15$type <- "Covid"
sdata.cov16$type <- "Covid"
sdata.cov17$type <- "Covid"

sdata.ctrl5$type <- "Ctrl"
sdata.ctrl13$type <- "Ctrl"
sdata.ctrl14$type <- "Ctrl"
sdata.ctrl19$type <- "Ctrl"

# Merge datasets into one single seurat object
alldata <- merge(sdata.cov1, c(sdata.cov15, sdata.cov16, sdata.cov17, sdata.ctrl5, sdata.ctrl13, sdata.ctrl14, sdata.ctrl19), add.cell.ids = c("covid_1", "covid_15", "covid_16", "covid_17", "ctrl_5", "ctrl_13", "ctrl_14", "ctrl_19"))
```
In Seurat v5, merging creates a single object, but keeps the expression information split into different layers for integration. If not proceeding with integration, rejoin the layers after merging.

``` {r}
#| label: join-layers

alldata <- JoinLayers(alldata)
alldata
```

{{< meta qc_collate_2 >}}

```{r}
#| label: gc

# remove all objects that will not be used.
rm(cov.1, cov.15, cov.16, cov.17, ctrl.5, ctrl.13, ctrl.14, ctrl.19, sdata.cov1, sdata.cov15, sdata.cov16, sdata.cov17, sdata.ctrl5, sdata.ctrl13, sdata.ctrl14, sdata.ctrl19)
# run garbage collect to free up memory
gc()
```

{{< meta qc_collate_3 >}}

```{r}
#| label: show-object

alldata[["RNA"]]$counts[1:10, 1:4] 
head(alldata@meta.data, 10)
```

## {{< meta qc_calqc >}}

{{< meta qc_calqc_1 >}}

{{< meta qc_calqc_2 >}}

```{r}
#| label: qc-calc

# Mitochondrial
alldata <- PercentageFeatureSet(alldata, "^MT-", col.name = "percent_mito")

# Ribosomal
alldata <- PercentageFeatureSet(alldata, "^RP[SL]", col.name = "percent_ribo")

# Percentage hemoglobin genes - includes all genes starting with HB except HBP.
alldata <- PercentageFeatureSet(alldata, "^HB[^(P|E|S)]", col.name = "percent_hb")

# Percentage for some platelet markers
alldata <- PercentageFeatureSet(alldata, "PECAM1|PF4", col.name = "percent_plat")
```

::: {.callout-tip collapse="true"}

Alternatively, percentage expression can be calculated manually. Here is an example. Do not run this script now.

```{r}
#| eval: false
# Do not run now!
total_counts_per_cell <- colSums(alldata@assays$RNA@counts)
mito_genes <- rownames(alldata)[grep("^MT-", rownames(alldata))]
alldata$percent_mito2 <- colSums(alldata@assays$RNA@counts[mito_genes, ]) / total_counts_per_cell
```

:::

{{< meta qc_calqc_3 >}}

```{r}
#| label: meta
head(alldata@meta.data)
```

## {{< meta qc_plotqc >}}

{{< meta qc_plotqc_1 >}}

```{r}
#| label: qc-vln
#| fig-height: 8
#| fig-width: 15

feats <- c("nFeature_RNA", "nCount_RNA", "percent_mito", "percent_ribo", "percent_hb", "percent_plat")
VlnPlot(alldata, group.by = "orig.ident", split.by = "type", features = feats, pt.size = 0.1, ncol = 3)
```

:::{.callout-note title="Discuss"}
{{< meta qc_plotqc_vln >}}
:::

{{< meta qc_plotqc_2 >}}

```{r}
#| label: qc-scatter
#| fig-height: 8
#| fig-width: 15

FeatureScatter(alldata, "nCount_RNA", "nFeature_RNA", group.by = "orig.ident", pt.size = .5)
```

:::{.callout-note title="Discuss"}
{{< meta qc_plotqc_3 >}}
:::

## {{< meta qc_filter >}}

### {{< meta qc_filter_detect >}}

{{< meta qc_filter_detect_1 >}}

```{r}
#| label: filt1
selected_c <- WhichCells(alldata, expression = nFeature_RNA > 200)
selected_f <- rownames(alldata)[Matrix::rowSums(alldata[["RNA"]]$counts) > 3]

data.filt <- subset(alldata, features = selected_f, cells = selected_c)
dim(data.filt)
table(data.filt$orig.ident)
```

{{< meta qc_filter_detect_3 >}}

```{r}
#| label: filt2
# skip and run DoubletFinder instead
# data.filt <- subset(data.filt, cells=WhichCells(data.filt, expression = nFeature_RNA < 4100))

```

{{< meta qc_filter_detect_4 >}}

```{r}
#| label: top-genes
#| fig-height: 8
#| fig-width: 15

# Compute the proportion of counts of each gene per cell
# Use sparse matrix operations, if your dataset is large, doing matrix devisions the regular way will take a very long time.

C <- data.filt[["RNA"]]$counts
C@x <- C@x / rep.int(colSums(C), diff(C@p)) * 100
most_expressed <- order(Matrix::rowSums(C), decreasing = T)[20:1]
boxplot(as.matrix(t(C[most_expressed, ])),
    cex = 0.1, las = 1, xlab = "Percent counts per cell",
    col = (scales::hue_pal())(20)[20:1], horizontal = TRUE
)
```

{{< meta qc_filter_detect_5 >}}

### {{< meta qc_filter_mr >}}

{{< meta qc_filter_mr_1 >}}

```{r}
#| label: filt3

data.filt <- subset(data.filt, percent_mito < 20 & percent_ribo > 5)
dim(data.filt)
table(data.filt$orig.ident)
```

{{< meta qc_filter_mr_2 >}}

### {{< meta qc_filter_plot >}}

{{< meta qc_filter_plot_1 >}}

```{r}
#| label: qc-vln2
#| fig-height: 8
#| fig-width: 15

feats <- c("nFeature_RNA", "nCount_RNA", "percent_mito", "percent_ribo", "percent_hb")
VlnPlot(data.filt, group.by = "orig.ident", features = feats, pt.size = 0.1, ncol = 3) + NoLegend()
```

### {{< meta qc_filter_genes >}}

{{< meta qc_filter_genes_1 >}}

```{r}
#| label: filt-genes
dim(data.filt)

# Filter MALAT1
data.filt <- data.filt[!grepl("MALAT1", rownames(data.filt)), ]

# Filter Mitocondrial
data.filt <- data.filt[!grepl("^MT-", rownames(data.filt)), ]

# Filter Ribossomal gene (optional if that is a problem on your data)
# data.filt <- data.filt[ ! grepl("^RP[SL]", rownames(data.filt)), ]

# Filter Hemoglobin gene (optional if that is a problem on your data)
data.filt <- data.filt[!grepl("^HB[^(P|E|S)]", rownames(data.filt)), ]

dim(data.filt)
```

## {{< meta qc_sex >}}

{{< meta qc_sex_1 >}}

{{< meta qc_sex_2 >}}

::: {.callout-tip collapse="true"}

Here is the code to download annotation data from Ensembl using biomaRt. We will not run this now and instead use a pre-computed file in the step below.

```{r}
#| label: annot

# fetch_annotation is defined at the top of this document
if (!fetch_annotation) {
  suppressMessages(library(biomaRt))

  # initialize connection to mart, may take some time if the sites are unresponsive.
  mart <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")

  # fetch chromosome info plus some other annotations
  genes_table <- try(biomaRt::getBM(attributes = c(
    "ensembl_gene_id", "external_gene_name",
    "description", "gene_biotype", "chromosome_name", "start_position"
  ), mart = mart, useCache = F))

  write.csv(genes_table, file = "data/covid/results/genes_table.csv")
}
```

:::

Download precomputed data.

```{r}
#| label: fetch-annot
# fetch_annotation is defined at the top of this document
if (fetch_annotation) {
  genes_file <- file.path(path_results, "genes_table.csv")
  if (!file.exists(genes_file)) download.file(file.path(path_data, "covid/results_seurat/genes_table.csv"), destfile = genes_file,
                                              method = "curl", extra = curl_upass)
}
```

```{r}
#| label: read-annot
genes.table <- read.csv(genes_file)
genes.table <- genes.table[genes.table$external_gene_name %in% rownames(data.filt), ]
```

{{< meta qc_sex_3 >}}

```{r}
#| label: par
par1 = c(10001, 2781479)
par2 = c(56887903, 57217415)
p1.gene = genes.table$external_gene_name[genes.table$start_position > par1[1] & genes.table$start_position < par1[2] & genes.table$chromosome_name == "Y"]
p2.gene = genes.table$external_gene_name[genes.table$start_position > par2[1] & genes.table$start_position < par2[2] & genes.table$chromosome_name == "Y"]

chrY.gene <- genes.table$external_gene_name[genes.table$chromosome_name == "Y"]
chrY.gene = setdiff(chrY.gene, c(p1.gene, p2.gene))

data.filt <- PercentageFeatureSet(data.filt, features = chrY.gene, col.name = "pct_chrY")
```

{{< meta qc_sex_4 >}}

```{r}
#| label: sex-scatter
FeatureScatter(data.filt, feature1 = "XIST", feature2 = "pct_chrY", slot = "counts")
```

{{< meta qc_sex_5 >}}

```{r}
#| label: sex-vln
VlnPlot(data.filt, features = c("XIST", "pct_chrY"))
```

::: {.callout-note}

## Discuss

{{< meta qc_sex_6 >}}

:::

## {{< meta qc_cellcycle >}}

{{< meta qc_cellcycle_1 >}}

```{r}
#| label: cc

# Before running CellCycleScoring the data need to be normalized and logtransformed.
data.filt <- NormalizeData(data.filt)
data.filt <- CellCycleScoring(
    object = data.filt,
    g2m.features = cc.genes$g2m.genes,
    s.features = cc.genes$s.genes
)
```

{{< meta qc_cellcycle_2 >}}

```{r}
#| label: cc-vln
#| fig-height: 5
#| fig-width: 15

VlnPlot(data.filt, features = c("S.Score", "G2M.Score"), group.by = "orig.ident", ncol = 3, pt.size = .1)
```

{{< meta qc_cellcycle_3 >}}

Seurat does an automatic prediction of cell cycle phase with a default cutoff of the scores at zero. As you can see this does not fit this data very well, so be cautious with using these predictions. Instead we suggest that you look at the scores.

```{r}
#| label: cc-scatter
#| fig-height: 7
#| fig-width: 7

FeatureScatter(data.filt, "S.Score", "G2M.Score", group.by = "Phase")
```

## {{< meta qc_doublet >}}

{{< meta qc_doublet_1 >}}

:::{.callout-caution}
{{< meta qc_doublet_2 >}}
:::

Here, we will use `DoubletFinder` to predict doublet cells. But before doing doublet detection we need to run scaling, variable gene selection and PCA, as well as UMAP for visualization. These steps will be explored in more detail in coming exercises.

```{r}
#| label: doublet-norm
data.filt <- FindVariableFeatures(data.filt, verbose = F)
data.filt <- ScaleData(data.filt, vars.to.regress = c("nFeature_RNA", "percent_mito"), verbose = F)
data.filt <- RunPCA(data.filt, verbose = F, npcs = 20)
data.filt <- RunUMAP(data.filt, dims = 1:10, verbose = F)
```

Then we run doubletFinder, selecting first 10 PCs and a `pK` value of 0.9. To optimize the parameters, you can run the `paramSweep` function in the package.

```{r}
#| label: doubletfinder

suppressMessages(library(DoubletFinder))
# Can run parameter optimization with paramSweep

# sweep.res <- paramSweep_v3(data.filt)
# sweep.stats <- summarizeSweep(sweep.res, GT = FALSE)
# bcmvn <- find.pK(sweep.stats)
# barplot(bcmvn$BCmetric, names.arg = bcmvn$pK, las=2)

# define the expected number of doublet cellscells.
nExp <- round(ncol(data.filt) * 0.04) # expect 4% doublets
data.filt <- doubletFinder(data.filt, pN = 0.25, pK = 0.09, nExp = nExp, PCs = 1:10)
```

```{r}
#| label: doublet-plot
#| fig-height: 4
#| fig-width: 10

# name of the DF prediction can change, so extract the correct column name.
DF.name <- colnames(data.filt@meta.data)[grepl("DF.classification", colnames(data.filt@meta.data))]

wrap_plots(
    DimPlot(data.filt, group.by = "orig.ident") + NoAxes(),
    DimPlot(data.filt, group.by = DF.name) + NoAxes(),
    ncol = 2
)
```

{{< meta qc_doublet_3 >}}

```{r}
#| label: doublet-vln

VlnPlot(data.filt, features = "nFeature_RNA", group.by = DF.name, pt.size = .1)
```

{{< meta qc_doublet_4 >}}

```{r}
#| label: doublet-filt

data.filt <- data.filt[, data.filt@meta.data[, DF.name] == "Singlet"]
dim(data.filt)
```

{{< meta qc_doublet_5 >}}

```{r}
#| label: view-data
table(alldata$orig.ident)
table(data.filt$orig.ident)
```

:::{.callout-note title="Discuss"}
{{< meta qc_doublet_6 >}}
:::


## {{< meta qc_save >}}

{{< meta qc_save_1 >}}

```{r}
#| label: save

saveRDS(data.filt, file.path(path_results, "seurat_covid_qc.rds"))
```

## {{< meta session >}}

<details>
  <summary>Click here</summary>

```{r}
#| label: session

sessionInfo()
```

</details>