---
title: "{{< meta ct_title >}}"
subtitle: "{{< meta subtitle_seurat >}}"
description: "{{< meta ct_description >}}"
format: html
---

::: {.callout-note}
Code chunks run R commands unless otherwise specified.
:::

{{< meta ct_1 >}}

{{< meta ct_2 >}}

## {{< meta ct_read >}}

{{< meta ct_read_1 >}}

```{r}
suppressPackageStartupMessages({
    library(Seurat)
    library(dplyr)
    library(patchwork)
    library(ggplot2)
    library(pheatmap)
    # remotes::install_github("powellgenomicslab/scPred")
    library(scPred)
})
```

{{< meta ct_read_2 >}}

```{r}
# download pre-computed data if missing or long compute
fetch_data <- TRUE

# url for source and intermediate data
path_data <- "https://export.uppmax.uu.se/naiss2023-23-3/workshops/workshop-scrnaseq"
path_file <- "data/covid/results/seurat_covid_qc_dr_int_cl.rds"
if (!dir.exists(dirname(path_file))) dir.create(dirname(path_file), recursive = TRUE)
if (fetch_data && !file.exists(path_file)) download.file(url = file.path(path_data, "covid/results/seurat_covid_qc_dr_int_cl.rds"), destfile = path_file)
alldata <- readRDS(path_file)
```

{{< meta ct_read_3 >}}

```{r}
ctrl <- alldata[, alldata$orig.ident == "ctrl_13"]

# set active assay to RNA and remove the CCA assay
ctrl@active.assay <- "RNA"
ctrl[["CCA"]] <- NULL
ctrl
```

## {{< meta ct_ref >}}

{{< meta ct_ref_1 >}}

```{r}
reference <- scPred::pbmc_1
reference
```

{{< meta ct_ref_2 >}}

Here, we will run all the steps that we did in previous labs in one go using the `magittr` package with the pipe-operator `%>%`.

```{r}
reference <- reference %>%
    NormalizeData() %>%
    FindVariableFeatures() %>%
    ScaleData() %>%
    RunPCA(verbose = F) %>%
    RunUMAP(dims = 1:30)
```

```{r}
#| fig-height: 5
#| fig-width: 6

DimPlot(reference, group.by = "cell_type", label = TRUE, repel = TRUE) + NoAxes()
```


{{< meta ct_ref_3 >}}

```{r}
# Set the identity as louvain with resolution 0.3
ctrl <- SetIdent(ctrl, value = "CCA_snn_res.0.5")

ctrl <- ctrl %>%
    NormalizeData() %>%
    FindVariableFeatures() %>%
    ScaleData() %>%
    RunPCA(verbose = F) %>%
    RunUMAP(dims = 1:30)
```

```{r}
#| fig-height: 5
#| fig-width: 6

DimPlot(ctrl, label = TRUE, repel = TRUE) + NoAxes()
```

## Label transfer

First we will run label transfer using a similar method as in the integration exercise. But, instead of CCA, which is the default for the `FindTransferAnchors()` function, we will use `pcaproject`, ie; the query dataset is projected onto the PCA of the reference dataset. Then, the labels of the reference data are predicted.

```{r}
transfer.anchors <- FindTransferAnchors(
    reference = reference, query = ctrl,
    dims = 1:30
)
predictions <- TransferData(
    anchorset = transfer.anchors, refdata = reference$cell_type,
    dims = 1:30
)
ctrl <- AddMetaData(object = ctrl, metadata = predictions)
```

```{r}
#| fig-height: 5
#| fig-width: 6

DimPlot(ctrl, group.by = "predicted.id", label = T, repel = T) + NoAxes()
```

Now plot how many cells of each celltypes can be found in each cluster.

```{r}
#| fig-height: 5
#| fig-width: 6

ggplot(ctrl@meta.data, aes(x = CCA_snn_res.0.5, fill = predicted.id)) +
    geom_bar() +
    theme_classic()
```

## {{< meta ct_scpred >}}

{{< meta ct_scpred_1 >}}

```{r}
reference <- getFeatureSpace(reference, "cell_type")
reference <- trainModel(reference)
```

{{< meta ct_scpred_2 >}}

```{r}
get_scpred(reference)
```

{{< meta ct_scpred_3 >}}

```{r}
ctrl <- scPredict(ctrl, reference)
```

```{r}
#| fig-height: 5
#| fig-width: 6

DimPlot(ctrl, group.by = "scpred_prediction", label = T, repel = T) + NoAxes()
```

{{< meta ct_scpred_4 >}}

```{r}
#| fig-height: 5
#| fig-width: 6

ggplot(ctrl@meta.data, aes(x = CCA_snn_res.0.5, fill = scpred_prediction)) +
    geom_bar() +
    theme_classic()
```

## {{< meta ct_azimuth >}}

{{< meta ct_azimuth_1 >}}

{{< meta ct_azimuth_2 >}}

This is how to save the count matrix:

```{r}
#| eval: false

# No need to run now.
C = ctrl@assays$RNA@counts
saveRDS(C, file = "data/covid/results/ctrl13_count_matrix.rds")
```  

Instead load the results and visualize:

```{r}
#| fig-height: 7
#| fig-width: 8

path_data <- "https://export.uppmax.uu.se/naiss2023-23-3/workshops/workshop-scrnaseq"
path_file <- "data/covid/results/azimuth_pred.tsv"
if (!dir.exists(dirname(path_file))) dir.create(dirname(path_file), recursive = TRUE)
if (fetch_data && !file.exists(path_file)) download.file(url = file.path(path_data, "covid/results/azimuth_pred.tsv"), destfile = path_file)

azimuth_pred <- read.table(path_file, sep = "\t", header = T)

# add predictions to the seurat object
ctrl$azimuth = azimuth_pred$predicted.celltype.l2[match(colnames(ctrl), azimuth_pred$cell)]
DimPlot(ctrl, group.by = "azimuth", label = T, repel = T) + NoAxes()
```


## {{< meta ct_compare >}}

{{< meta ct_compare_1 >}}

```{r}
crossTab(ctrl, "predicted.id", "scpred_prediction")
```

{{< meta ct_compare_2 >}}

```{r}
#| fig-height: 5
#| fig-width: 16

wrap_plots(
    DimPlot(ctrl, label = T, group.by = "predicted.id") + NoAxes(),
    DimPlot(ctrl, label = T, group.by = "scpred_prediction") + NoAxes(),
    DimPlot(ctrl, label = T, group.by = "azimuth") + NoAxes(),
    ncol = 3
)
```

## {{< meta ct_gsea >}}

{{< meta ct_gsea_1 >}}

### {{< meta ct_gsea_deg >}}

{{< meta ct_gsea_deg_1 >}}

```{r}
# run differential expression in our dataset, using clustering at resolution 0.5
alldata <- SetIdent(alldata, value = "CCA_snn_res.0.5")
DGE_table <- FindAllMarkers(
    alldata,
    logfc.threshold = 0,
    test.use = "wilcox",
    min.pct = 0.1,
    min.diff.pct = 0,
    only.pos = TRUE,
    max.cells.per.ident = 20,
    return.thresh = 1,
    assay = "RNA"
)

# split into a list
DGE_list <- split(DGE_table, DGE_table$cluster)

unlist(lapply(DGE_list, nrow))
```

```{r}
# Compute differential gene expression in reference dataset (that has cell annotation)
reference <- SetIdent(reference, value = "cell_type")
reference_markers <- FindAllMarkers(
    reference,
    min.pct = .1,
    min.diff.pct = .2,
    only.pos = T,
    max.cells.per.ident = 20,
    return.thresh = 1
)

# Identify the top cell marker genes in reference dataset
# select top 50 with hihgest foldchange among top 100 signifcant genes.
reference_markers <- reference_markers[order(reference_markers$avg_log2FC, decreasing = T), ]
reference_markers %>%
    group_by(cluster) %>%
    top_n(-100, p_val) %>%
    top_n(50, avg_log2FC) -> top50_cell_selection

# Transform the markers into a list
ref_list <- split(top50_cell_selection$gene, top50_cell_selection$cluster)

unlist(lapply(ref_list, length))
```

{{< meta ct_gsea_deg_2 >}}

```{r}
suppressPackageStartupMessages(library(fgsea))

# run fgsea for each of the clusters in the list
res <- lapply(DGE_list, function(x) {
    gene_rank <- setNames(x$avg_log2FC, x$gene)
    fgseaRes <- fgsea(pathways = ref_list, stats = gene_rank, nperm = 10000)
    return(fgseaRes)
})
names(res) <- names(DGE_list)

# You can filter and resort the table based on ES, NES or pvalue
res <- lapply(res, function(x) {
    x[x$pval < 0.1, ]
})
res <- lapply(res, function(x) {
    x[x$size > 2, ]
})
res <- lapply(res, function(x) {
    x[order(x$NES, decreasing = T), ]
})
res
```

{{< meta ct_gsea_deg_3 >}}

```{r}
#| fig-height: 5
#| fig-width: 11

new.cluster.ids <- unlist(lapply(res, function(x) {
    as.data.frame(x)[1, 1]
}))

alldata$ref_gsea <- new.cluster.ids[as.character(alldata@active.ident)]

wrap_plots(
    DimPlot(alldata, label = T, group.by = "CCA_snn_res.0.5") + NoAxes(),
    DimPlot(alldata, label = T, group.by = "ref_gsea") + NoAxes(),
    ncol = 2
)
```

{{< meta ct_gsea_deg_4 >}}

```{r}
#| fig-height: 5
#| fig-width: 16

ctrl$ref_gsea <- alldata$ref_gsea[alldata$orig.ident == "ctrl_13"]

wrap_plots(
    DimPlot(ctrl, label = T, group.by = "ref_gsea") + NoAxes() + ggtitle("GSEA"),
    DimPlot(ctrl, label = T, group.by = "predicted.id") + NoAxes() + ggtitle("LabelTransfer"),
    DimPlot(ctrl, label = T, group.by = "scpred_prediction") + NoAxes() + ggtitle("scPred"),
    ncol = 3
)
```

### {{< meta ct_gsea_annot >}}

{{< meta ct_gsea_annot_1 >}}

```{r}
path_file <- file.path("data/cell_marker_human.csv")
if (!file.exists(path_file)) download.file(file.path(path_data, "cell_marker_human.csv"), destfile = path_file)
```

```{r}
# Load the human marker table
markers <- read.delim("data/cell_marker_human.csv", sep = ";")
markers <- markers[markers$species == "Human", ]
markers <- markers[markers$cancer_type == "Normal", ]

# Filter by tissue (to reduce computational time and have tissue-specific classification)
sort(unique(markers$tissue_type))
grep("blood", unique(markers$tissue_type), value = T)
markers <- markers[markers$tissue_type %in% c(
    "Blood", "Venous blood",
    "Serum", "Plasma",
    "Spleen", "Bone marrow", "Lymph node"
), ]

# remove strange characters etc.
celltype_list <- lapply(unique(markers$cell_name), function(x) {
    x <- paste(markers$Symbol[markers$cell_name == x], sep = ",")
    x <- gsub("[[]|[]]| |-", ",", x)
    x <- unlist(strsplit(x, split = ","))
    x <- unique(x[!x %in% c("", "NA", "family")])
    x <- casefold(x, upper = T)
})
names(celltype_list) <- unique(markers$cell_name)

celltype_list <- celltype_list[unlist(lapply(celltype_list, length)) < 100]
celltype_list <- celltype_list[unlist(lapply(celltype_list, length)) > 5]
```

```{r}
# run fgsea for each of the clusters in the list
res <- lapply(DGE_list, function(x) {
    gene_rank <- setNames(x$avg_log2FC, x$gene)
    fgseaRes <- fgsea(pathways = celltype_list, stats = gene_rank, nperm = 10000, scoreType = "pos")
    return(fgseaRes)
})
names(res) <- names(DGE_list)

# You can filter and resort the table based on ES, NES or pvalue
res <- lapply(res, function(x) {
    x[x$pval < 0.01, ]
})
res <- lapply(res, function(x) {
    x[x$size > 5, ]
})
res <- lapply(res, function(x) {
    x[order(x$NES, decreasing = T), ]
})

# show top 3 for each cluster.
lapply(res, head, 3)
```

Let's plot the results.

```{r}
#| fig-height: 5
#| fig-width: 11

new.cluster.ids <- unlist(lapply(res, function(x) {
    as.data.frame(x)[1, 1]
}))
alldata$cellmarker_gsea <- new.cluster.ids[as.character(alldata@active.ident)]

wrap_plots(
    DimPlot(alldata, label = T, group.by = "ref_gsea") + NoAxes(),
    DimPlot(alldata, label = T, group.by = "cellmarker_gsea") + NoAxes(),
    ncol = 2
)
```


:::{.callout-note title="Discuss"}
{{< meta ct_gsea_annot_2 >}}
:::

{{< meta ct_gsea_annot_3 >}}

{{< meta ct_save >}}

```{r}
saveRDS(ctrl, "data/covid/results/seurat_covid_qc_dr_int_cl_ct-ctrl13.rds")
```

## {{< meta session >}}

<details>
  <summary>Click here</summary>

```{r}
sessionInfo()
```

</details>
