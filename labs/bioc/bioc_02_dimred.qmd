---
title: "{{< meta dimred_title >}}"
subtitle: "{{< meta subtitle_bioc >}}"
description: "{{< meta dimred_description >}}"
format: html
---

::: {.callout-note}
Code chunks run R commands unless otherwise specified.
:::

## {{< meta dimred_prep >}}

{{< meta dimred_prep_1 >}}

```{r}
suppressPackageStartupMessages({
    library(scater)
    library(scran)
    library(patchwork)
    library(ggplot2)
    library(umap)
})
```

```{r}
# download pre-computed data if missing or long compute
fetch_data <- TRUE

# url for source and intermediate data
path_data <- "https://nextcloud.dc.scilifelab.se/public.php/webdav"
curl_upass <- "-u zbC5fr2LbEZ9rSE:scRNAseq2025"

path_file <- "data/covid/results/bioc_covid_qc.rds"
if (!dir.exists(dirname(path_file))) dir.create(dirname(path_file), recursive = TRUE)
if (fetch_data && !file.exists(path_file)) download.file(url = file.path(path_data, "covid/results_bioc/bioc_covid_qc.rds"), destfile = path_file, method = "curl", extra = curl_upass)

sce <- readRDS(path_file)
```

## {{< meta dimred_fs >}}

{{< meta dimred_fs_2 >}}


With `modelGeneVar` we can specify a blocking parameter, so the trend fitting and variance decomposition is done separately for each batch.

```{r}


sce <- computeSumFactors(sce, sizes = c(20, 40, 60, 80))
sce <- logNormCounts(sce)
var.out <- modelGeneVar(sce, block = sce$sample)
hvgs <- getTopHVGs(var.out, n = 2000)

```

We can plot the *total* variance and the *biological* variance vs mean expressioni for one of the samples. 

```{r}
#| fig-height: 4
#| fig-width: 8

par(mfrow = c(1, 2))
# plot mean over TOTAL variance
# Visualizing the fit:
fit.var <- metadata(var.out$per.block[[1]])
{
    plot(fit.var$mean, fit.var$var,
        xlab = "Mean of log-expression",
        ylab = "Variance of log-expression",
        main = "Total variance"
    )
    curve(fit.var$trend(x), col = "dodgerblue", add = TRUE, lwd = 2)

    # Select 1000 top variable genes
    hvg.out <- getTopHVGs(var.out, n = 1000)

    # highligt those cells in the plot
    cutoff <- rownames(var.out) %in% hvg.out
    points(fit.var$mean[cutoff], fit.var$var[cutoff], col = "red", pch = 16, cex = .6)
}

{
    # plot mean over BIOLOGICAL variance for same sample
    plot(var.out$per.block[[1]]$mean, var.out$per.block[[1]]$bio, pch = 16, cex = 0.4, 
         xlab = "Mean log-expression", 
         ylab = "Variance of log-expression",
         main = "Biological variance")
    lines(c(min(var.out$per.block[[1]]$mean), max(var.out$per.block[[1]]$mean)), c(0, 0), col = "dodgerblue", lwd = 2)
    points(var.out$per.block[[1]]$mean[cutoff], var.out$per.block[[1]]$bio[cutoff], col = "red", pch = 16, cex = .6)
}
```

We can plot the same for all the samples, also showing the technical variance.

```{r}
#| fig-height: 4
#| fig-width: 8

cutoff <- rownames(var.out) %in% hvgs

par(mfrow = c(1, 3))
    plot(var.out$mean, var.out$total, pch = 16, cex = 0.4, 
         xlab = "Mean log-expression", 
         ylab = "Variance of log-expression",
         main = "Total variance")
    points(var.out$mean[cutoff], var.out$total[cutoff], col = "red", pch = 16, cex = .6)

    plot(var.out$mean, var.out$bio, pch = 16, cex = 0.4, 
         xlab = "Mean log-expression", 
         ylab = "Variance of log-expression",
         main = "Biological variance")
    points(var.out$mean[cutoff], var.out$bio[cutoff], col = "red", pch = 16, cex = .6)
    
    plot(var.out$mean, var.out$tech, pch = 16, cex = 0.4, 
         xlab = "Mean log-expression", 
         ylab = "Variance of log-expression",
         main = "Technical variance")
    points(var.out$mean[cutoff], var.out$tech[cutoff], col = "red", pch = 16, cex = .6)    
```


## {{< meta dimred_zs >}}

{{< meta dimred_zs_1 >}}

However, unlike the Seurat, this step is implemented inside the PCA function below. Here we will show you how to add the scaledData back to the object.

```{r}
# sce@assays$data@listData$scaled.data <- apply(exprs(sce)[rownames(hvg.out),,drop=FALSE],2,function(x) scale(x,T,T))
# rownames(sce@assays$data@listData$scaled.data) <- rownames(hvg.out)
```


## {{< meta dimred_pca >}}

{{< meta dimred_pca_1 >}}

We use the `logcounts` and then set `scale_features` to TRUE in order to scale each gene.

```{r}
# runPCA and specify the variable genes to use for dim reduction with subset_row
sce <- runPCA(sce, exprs_values = "logcounts", ncomponents = 50, subset_row = hvgs, scale = TRUE)
```

{{< meta dimred_pca_2 >}}

```{r}
#| fig-height: 3.5
#| fig-width: 10

wrap_plots(
    plotReducedDim(sce, dimred = "PCA", colour_by = "sample", ncomponents = 1:2, point_size = 0.6),
    plotReducedDim(sce, dimred = "PCA", colour_by = "sample", ncomponents = 3:4, point_size = 0.6),
    plotReducedDim(sce, dimred = "PCA", colour_by = "sample", ncomponents = 5:6, point_size = 0.6),
    ncol = 3
) + plot_layout(guides = "collect")
```

{{< meta dimred_pca_3 >}}

Here, we can check how the different metadata variables contributes to each PC. This can be important to look at to understand different biases you may have in your data.

```{r}
#| fig-height: 3.5
#| fig-width: 10

plotExplanatoryPCs(sce,nvars_to_plot = 15)
```
Clearly, the sample id contributes to many of the PCs and PC7 but you can also see that many PCs are effected by different QC parameters.

{{< meta dimred_pca_4 >}}

```{r}
#| fig-height: 4
#| fig-width: 4

plot(attr(reducedDim(sce, "PCA"), "percentVar")[1:50] * 100, type = "l", ylab = "% variance", xlab = "Principal component #")
points(attr(reducedDim(sce, "PCA"), "percentVar")[1:50] * 100, pch = 21, bg = "grey", cex = .5)
```

{{< meta dimred_pca_5 >}}

## {{< meta dimred_tsne >}}

{{< meta dimred_tsne_1 >}}

```{r}
set.seed(42)
sce <- runTSNE(sce, dimred = "PCA", n_dimred = 30, perplexity = 30, name = "tSNE_on_PCA")
```

{{< meta dimred_tsne_2 >}}

```{r}
#| fig-height: 5
#| fig-width: 7

plotReducedDim(sce, dimred = "tSNE_on_PCA", colour_by = "sample")
```

## {{< meta dimred_umap >}}

{{< meta dimred_umap_1 >}}

```{r}
sce <- runUMAP(sce, dimred = "PCA", n_dimred = 30, ncomponents = 2, name = "UMAP_on_PCA")
# see ?umap and ?runUMAP for more info
```

{{< meta dimred_umap_2 >}}

```{r}
sce <- runUMAP(sce, dimred = "PCA", n_dimred = 30, ncomponents = 10, name = "UMAP10_on_PCA")
# see ?umap and ?runUMAP for more info
```

{{< meta dimred_umap_3 >}}

```{r}
#| fig-height: 3.5
#| fig-width: 10

wrap_plots(
    plotReducedDim(sce, dimred = "UMAP_on_PCA", colour_by = "sample") +
        ggplot2::ggtitle(label = "UMAP_on_PCA"),
    plotReducedDim(sce, dimred = "UMAP10_on_PCA", colour_by = "sample", ncomponents = 1:2) +
        ggplot2::ggtitle(label = "UMAP10_on_PCA"),
    plotReducedDim(sce, dimred = "UMAP10_on_PCA", colour_by = "sample", ncomponents = 3:4) +
        ggplot2::ggtitle(label = "UMAP10_on_PCA"),
    ncol = 3
) + plot_layout(guides = "collect")
```

::: {.callout-note title="Discuss"}
{{< meta dimred_umap_4 >}}
:::

## {{< meta dimred_zsg >}}

{{< meta dimred_zsg_1 >}}

### {{< meta dimred_zsg_zs >}}

{{< meta dimred_zsg_zs_1 >}}

```{r}
sce <- runUMAP(sce, exprs_values = "logcounts", name = "UMAP_on_ScaleData")
```

### {{< meta dimred_zsg_g >}}

{{< meta dimred_zsg_g_1 >}}

```{r}
# Build Graph
nn <- RANN::nn2(reducedDim(sce, "PCA"), k = 30)
names(nn) <- c("idx", "dist")
g <- buildKNNGraph(sce, k = 30, use.dimred = "PCA")
reducedDim(sce, "KNN") <- igraph::as_adjacency_matrix(g)

# Run UMAP and rename it for comparisson
# temp <- umap::umap.defaults
try(reducedDim(sce, "UMAP_on_Graph") <- NULL)
reducedDim(sce, "UMAP_on_Graph") <- uwot::umap(X = NULL, n_components = 2, nn_method = nn)
```

{{< meta dimred_zsg_g_2 >}}

```{r}
#| fig-height: 3.5
#| fig-width: 10

wrap_plots(
    plotReducedDim(sce, dimred = "UMAP_on_PCA", colour_by = "sample") +
        ggplot2::ggtitle(label = "UMAP_on_PCA"),
    plotReducedDim(sce, dimred = "UMAP_on_ScaleData", colour_by = "sample") +
        ggplot2::ggtitle(label = "UMAP_on_ScaleData"),
    plotReducedDim(sce, dimred = "UMAP_on_Graph", colour_by = "sample") +
        ggplot2::ggtitle(label = "UMAP_on_Graph"),
    ncol = 3
) + plot_layout(guides = "collect")
```

## {{< meta dimred_plotgenes >}}

{{< meta dimred_plotgenes_1 >}}

|Markers|Cell Type|
|:---|:---|
|CD3E|T cells|
|CD3E CD4|CD4+ T cells|
|CD3E CD8A|CD8+ T cells|
|GNLY, NKG7|NK cells|
|MS4A1|B cells|
|CD14, LYZ, CST3, MS4A7|CD14+ Monocytes|
|FCGR3A, LYZ, CST3, MS4A7|FCGR3A+  Monocytes|
|FCER1A, CST3|DCs|

```{r}
#| fig-height: 14
#| fig-width: 11

plotlist <- list()
for (i in c("CD3E", "CD4", "CD8A", "NKG7", "GNLY", "MS4A1", "CD14", "LYZ", "MS4A7", "FCGR3A", "CST3", "FCER1A")) {
    plotlist[[i]] <- plotReducedDim(sce, dimred = "UMAP_on_PCA", colour_by = i, by_exprs_values = "logcounts") +
        scale_fill_gradientn(colours = colorRampPalette(c("grey90", "orange3", "firebrick", "firebrick", "red", "red"))(10)) +
        ggtitle(label = i) + theme(plot.title = element_text(size = 20))
}
wrap_plots(plotlist, ncol = 3)
```

:::{.callout-note title="Discuss"}
{{< meta dimred_plotgenes_2 >}}
:::


```{r}
#| fig-height: 8
#| fig-width: 11


    
plotlist <- list()
for (i in c("detected", "total", "subsets_mt_percent","subsets_ribo_percent","subsets_hb_percent")) { 
    plotlist[[i]] <- plotReducedDim(sce, dimred = "UMAP_on_PCA", colour_by = i, by_exprs_values = "logcounts") +
        scale_fill_gradientn(colours = colorRampPalette(c("grey90", "orange3", "firebrick", "firebrick", "red", "red"))(10)) +
        ggtitle(label = i) + theme(plot.title = element_text(size = 20))
}
wrap_plots(plotlist, ncol = 3)
```


## {{< meta dimred_save >}}

{{< meta dimred_save_1 >}}

```{r}
saveRDS(sce, "data/covid/results/bioc_covid_qc_dr.rds")
```

## {{< meta session >}}

<details>
  <summary>Click here</summary>

```{r}
sessionInfo()
```

</details>
