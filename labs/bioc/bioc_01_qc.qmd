---
title: "{{< meta qc_title >}}"
subtitle: "{{< meta subtitle_bioc >}}"
description: "{{< meta qc_description >}}"
format: html
---

::: {.callout-note}
Code chunks run R commands unless otherwise specified.
:::

## {{< meta qc_data >}}

{{< meta qc_data_1 >}}


```{r}
# download pre-computed annotation
fetch_annotation <- TRUE

# url for source and intermediate data
path_data <- "https://nextcloud.dc.scilifelab.se/public.php/webdav"
curl_upass <- "-u zbC5fr2LbEZ9rSE:scRNAseq2025"

path_covid <- "./data/covid/raw"
if (!dir.exists(path_covid)) dir.create(path_covid, recursive = T)

path_results <- "./data/covid/results"
if (!dir.exists(path_results)) dir.create(path_results, recursive = T)

```

```{r}
file_list <- c(
    "normal_pbmc_13.h5", "normal_pbmc_14.h5", "normal_pbmc_19.h5", "normal_pbmc_5.h5",
    "ncov_pbmc_15.h5", "ncov_pbmc_16.h5", "ncov_pbmc_17.h5", "ncov_pbmc_1.h5"
)

for (i in file_list) {
    path_file <- file.path(path_covid, i)
    if (!file.exists(path_file)) {
        download.file(url = file.path(file.path(path_data, "covid/raw"), i), 
                      destfile = path_file, method = "curl", extra = curl_upass)
    }
}
```

{{< meta qc_data_2 >}}

```{r}
suppressPackageStartupMessages({
    library(scater)
    library(scran)
    library(patchwork) # combining figures
    library(org.Hs.eg.db)
    library(scDblFinder)
})
```

{{< meta qc_data_3 >}}

```{r}
cov.15 <- Seurat::Read10X_h5(
    filename = file.path(path_covid, "ncov_pbmc_15.h5"),
    use.names = T
)
cov.1 <- Seurat::Read10X_h5(
    filename = file.path(path_covid, "ncov_pbmc_1.h5"),
    use.names = T
)
cov.16 <- Seurat::Read10X_h5(
    filename = file.path(path_covid, "ncov_pbmc_16.h5"),
    use.names = T
)
cov.17 <- Seurat::Read10X_h5(
    filename = file.path(path_covid, "ncov_pbmc_17.h5"),
    use.names = T
)

ctrl.5 <- Seurat::Read10X_h5(
    filename = file.path(path_covid, "normal_pbmc_5.h5"),
    use.names = T
)
ctrl.13 <- Seurat::Read10X_h5(
    filename = file.path(path_covid, "normal_pbmc_13.h5"),
    use.names = T
)
ctrl.14 <- Seurat::Read10X_h5(
    filename = file.path(path_covid, "normal_pbmc_14.h5"),
    use.names = T
)
ctrl.19 <- Seurat::Read10X_h5(
    filename = file.path(path_covid, "normal_pbmc_19.h5"),
    use.names = T
)
```

## {{< meta qc_collate >}}

{{< meta qc_collate_1 >}}

```{r}
sce <- SingleCellExperiment(assays = list(counts = cbind(cov.1, cov.15, cov.16, cov.17, ctrl.5, ctrl.13, ctrl.14,ctrl.19)))
dim(sce)
# Adding metadata
sce@colData$sample <- unlist(sapply(c("cov.1", "cov.15", "cov.16", "cov.17", "ctrl.5", "ctrl.13", "ctrl.14","ctrl.19"), function(x) rep(x, ncol(get(x)))))
sce@colData$type <- ifelse(grepl("cov", sce@colData$sample), "Covid", "Control")
```

{{< meta qc_collate_2 >}}

```{r}
# remove all objects that will not be used.
rm(cov.15, cov.1, cov.17, cov.16, ctrl.5, ctrl.13, ctrl.14, ctrl.19)
# run garbage collect to free up memory
gc()
```

{{< meta qc_collate_3 >}}

```{r }
head(counts(sce)[, 1:10])
head(sce@colData, 10)
```

## {{< meta qc_calqc >}}

{{< meta qc_calqc_1 >}}

{{< meta qc_calqc_2 >}}

```{r}
# Mitochondrial genes
mito_genes <- rownames(sce)[grep("^MT-", rownames(sce))]
# Ribosomal genes
ribo_genes <- rownames(sce)[grep("^RP[SL]", rownames(sce))]
# Hemoglobin genes - includes all genes starting with HB except HBP.
hb_genes <- rownames(sce)[grep("^HB[^(P|E|S)]", rownames(sce))]
```

First, let Scran calculate some general qc-stats for genes and cells with the function `perCellQCMetrics`. It can also calculate proportion of counts for specific gene subsets, so first we need to define which genes are mitochondrial, ribosomal and hemoglobin.

```{r}
sce <- addPerCellQC(sce, flatten = T, subsets = list(mt = mito_genes, hb = hb_genes, ribo = ribo_genes))

# Way2: Doing it manually
sce@colData$percent_mito <- Matrix::colSums(counts(sce)[mito_genes, ]) / sce@colData$total * 100
```

{{< meta qc_calqc_3 >}}

```{r}
head(colData(sce))
```

## {{< meta qc_plotqc >}}

{{< meta qc_plotqc_1 >}}

```{r}
#| fig-height: 6
#| fig-width: 10

# total is total UMIs per cell
# detected is number of detected genes.
# the different gene subset percentages are listed as subsets_mt_percent etc.

wrap_plots(
    plotColData(sce, y = "detected", x = "sample", colour_by = "sample"),
    plotColData(sce, y = "total", x = "sample", colour_by = "sample"),
    plotColData(sce, y = "subsets_mt_percent", x = "sample", colour_by = "sample"),
    plotColData(sce, y = "subsets_ribo_percent", x = "sample", colour_by = "sample"),
    plotColData(sce, y = "subsets_hb_percent", x = "sample", colour_by = "sample"),
    ncol = 3
) + plot_layout(guides = "collect")
```

{{< meta qc_plotqc_2 >}}

```{r}
#| fig-height: 5
#| fig-width: 6
plotColData(sce, x = "total", y = "detected", colour_by = "sample")
```

:::{.callout-note title="Discuss"}
{{< meta qc_plotqc_3 >}}
:::

## {{< meta qc_filter >}}

### {{< meta qc_filter_detect >}}

{{< meta qc_filter_detect_1 >}}

In Scran, we can use the function `quickPerCellQC` to filter out outliers from distributions of qc stats, such as detected genes, gene subsets etc. But in this case, we will take one setting at a time and run through the steps of filtering cells.

```{r}
dim(sce)

selected_c <- colnames(sce)[sce$detected > 200]
selected_f <- rownames(sce)[Matrix::rowSums(counts(sce)) > 3]

sce.filt <- sce[selected_f, selected_c]
dim(sce.filt)
```

{{< meta qc_filter_detect_3 >}}

```{r}
# skip for now and run doublet detection instead...

# high.det.v3 <- sce.filt$nFeatures > 4100
# high.det.v2 <- (sce.filt$nFeatures > 2000) & (sce.filt$sample_id == "v2.1k")

# remove these cells
# sce.filt <- sce.filt[ , (!high.det.v3) & (!high.det.v2)]

# check number of cells
# ncol(sce.filt)
```

{{< meta qc_filter_detect_4 >}}

In Scater, you can also use the function `plotHighestExprs()` to plot the gene contribution, but the function is quite slow, so we will do it on our own instead..

```{r}
#| fig-height: 7
#| fig-width: 7
# Compute the relative expression of each gene per cell
# Use sparse matrix operations, if your dataset is large, doing matrix devisions the regular way will take a very long time.
C <- counts(sce.filt)
C@x <- C@x / rep.int(colSums(C), diff(C@p)) * 100
most_expressed <- order(Matrix::rowSums(C), decreasing = T)[20:1]
boxplot(as.matrix(t(C[most_expressed, ])), cex = .1, las = 1, xlab = "% total count per cell", col = scales::hue_pal()(20)[20:1], horizontal = TRUE)

rm(C)

# also, there is the option of running the function "plotHighestExprs" in the scater package, however, this function takes very long to execute.
```

{{< meta qc_filter_detect_5 >}}

### {{< meta qc_filter_mr >}}

{{< meta qc_filter_mr_1 >}}

```{r}
selected_mito <- sce.filt$subsets_mt_percent < 20
selected_ribo <- sce.filt$subsets_ribo_percent > 5

# and subset the object to only keep those cells
sce.filt <- sce.filt[, selected_mito & selected_ribo]
dim(sce.filt)
```

{{< meta qc_filter_mr_2 >}}

### {{< meta qc_filter_plot >}}

{{< meta qc_filter_plot_1 >}}

```{r}
#| fig-height: 6
#| fig-width: 10

wrap_plots(
    plotColData(sce, y = "detected", x = "sample", colour_by = "sample"),
    plotColData(sce, y = "total", x = "sample", colour_by = "sample"),
    plotColData(sce, y = "subsets_mt_percent", x = "sample", colour_by = "sample"),
    plotColData(sce, y = "subsets_ribo_percent", x = "sample", colour_by = "sample"),
    plotColData(sce, y = "subsets_hb_percent", x = "sample", colour_by = "sample"),
    ncol = 3
) + plot_layout(guides = "collect")
```

### {{< meta qc_filter_genes >}}

{{< meta qc_filter_genes_1 >}}

```{r}
dim(sce.filt)

# Filter MALAT1
sce.filt <- sce.filt[!grepl("MALAT1", rownames(sce.filt)), ]

# Filter Mitocondrial
sce.filt <- sce.filt[!grepl("^MT-", rownames(sce.filt)), ]

# Filter Ribossomal gene (optional if that is a problem on your data)
# sce.filt <- sce.filt[ ! grepl("^RP[SL]", rownames(sce.filt)), ]

# Filter Hemoglobin gene  (optional if that is a problem on your data)
sce.filt <- sce.filt[!grepl("^HB[^(P|E|S)]", rownames(sce.filt)), ]

dim(sce.filt)
```


## {{< meta qc_sex >}}

{{< meta qc_sex_1 >}}

{{< meta qc_sex_2 >}}

::: {.callout-tip collapse="true"}

Here is the code to download annotation data from Ensembl using biomaRt. We will not run this now and instead use a pre-computed file in the step below.

```{r}
# fetch_annotation is defined at the top of this document
if (!fetch_annotation) {
  suppressMessages(library(biomaRt))

  # initialize connection to mart, may take some time if the sites are unresponsive.
  mart <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")

  # fetch chromosome info plus some other annotations
  genes_table <- try(biomaRt::getBM(attributes = c(
    "ensembl_gene_id", "external_gene_name",
    "description", "gene_biotype", "chromosome_name", "start_position"
  ), mart = mart, useCache = F))

  write.csv(genes_table, file = "data/covid/results/genes_table.csv")
}
```

:::

Download precomputed data.

```{r}
# fetch_annotation is defined at the top of this document
if (fetch_annotation) {
  genes_file <- file.path(path_results, "genes_table.csv")
  if (!file.exists(genes_file)) download.file(file.path(path_data, "covid/results_bioc/genes_table.csv"), destfile = genes_file,
                                              method = "curl", extra = curl_upass)
}

```

```{r}
genes.table <- read.csv(genes_file)
genes.table <- genes.table[genes.table$external_gene_name %in% rownames(sce.filt), ]
```

{{< meta qc_sex_3 >}}

```{r}
par1 = c(10001, 2781479)
par2 = c(56887903, 57217415)
p1.gene = genes.table$external_gene_name[genes.table$start_position > par1[1] & genes.table$start_position < par1[2] & genes.table$chromosome_name == "Y"]
p2.gene = genes.table$external_gene_name[genes.table$start_position > par2[1] & genes.table$start_position < par2[2] & genes.table$chromosome_name == "Y"]

chrY.gene <- genes.table$external_gene_name[genes.table$chromosome_name == "Y"]
chrY.gene = setdiff(chrY.gene, c(p1.gene, p2.gene))

sce.filt@colData$pct_chrY <- Matrix::colSums(counts(sce.filt)[chrY.gene, ]) / colSums(counts(sce.filt))
```

{{< meta qc_sex_4 >}}

```{r}
#| fig-height: 5
#| fig-width: 5

# as plotColData cannot take an expression vs metadata, we need to add in XIST expression to colData
sce.filt@colData$XIST <- counts(sce.filt)["XIST", ] / colSums(counts(sce.filt)) * 10000
plotColData(sce.filt, "XIST", "pct_chrY")
```

{{< meta qc_sex_5 >}}

```{r}
#| fig-height: 4
#| fig-width: 8

wrap_plots(
    plotColData(sce.filt, y = "XIST", x = "sample", colour_by = "sample"),
    plotColData(sce.filt, y = "pct_chrY", x = "sample", colour_by = "sample"),
    ncol = 2
) + plot_layout(guides = "collect")
```

::: {.callout-note}

## Discuss

{{< meta qc_sex_6 >}}

:::

## {{< meta qc_cellcycle >}}

{{< meta qc_cellcycle_1 >}}

```{r}
hs.pairs <- readRDS(system.file("exdata", "human_cycle_markers.rds", package = "scran"))
anno <- select(org.Hs.eg.db, keys = rownames(sce.filt), keytype = "SYMBOL", column = "ENSEMBL")
ensembl <- anno$ENSEMBL[match(rownames(sce.filt), anno$SYMBOL)]

# Use only genes related to biological process cell cycle to speed up
# https://www.ebi.ac.uk/QuickGO/term/GO:0007049 = cell cycle (BP,Biological Process)
GOs <- na.omit(select(org.Hs.eg.db, keys = na.omit(ensembl), keytype = "ENSEMBL", column = "GO"))
GOs <- GOs[GOs$GO == "GO:0007049", "ENSEMBL"]
hs.pairs <- lapply(hs.pairs, function(x) {
    x[rowSums(apply(x, 2, function(i) i %in% GOs)) >= 1, ]
})
str(hs.pairs)
cc.ensembl <- ensembl[ensembl %in% GOs] # This is the fastest (less genes), but less accurate too
# cc.ensembl <- ensembl[ ensembl %in% unique(unlist(hs.pairs))]

assignments <- cyclone(sce.filt[ensembl %in% cc.ensembl, ], hs.pairs, gene.names = ensembl[ensembl %in% cc.ensembl])
sce.filt$G1.score <- assignments$scores$G1
sce.filt$G2M.score <- assignments$scores$G2M
sce.filt$S.score <- assignments$scores$S
sce.filt$phase <- assignments$phases

table(sce.filt$phase)
```

{{< meta qc_cellcycle_2 >}}

```{r}
#| fig-height: 4
#| fig-width: 14

wrap_plots(
    plotColData(sce.filt, y = "G2M.score", x = "G1.score", colour_by = "phase"),
    plotColData(sce.filt, y = "G2M.score", x = "sample", colour_by = "sample"),
    plotColData(sce.filt, y = "G1.score", x = "sample", colour_by = "sample"),
    plotColData(sce.filt, y = "S.score", x = "sample", colour_by = "sample"),
    ncol = 4
) + plot_layout(guides = "collect")
```

Cyclone predicts most cells as G1, but also quite a lot of cells with high S-Phase scores. Compare to results with Seurat and Scanpy and see how different predictors will give clearly different results.

Cyclone does an automatic prediction of cell cycle phase with a default cutoff of the scores at 0.5 As you can see this does not fit this data very well, so be cautious with using these predictions. Instead we suggest that you look at the scores.

## {{< meta qc_doublet >}}

{{< meta qc_doublet_1 >}}

:::{.callout-caution}
{{< meta qc_doublet_2 >}}
:::

There is a method to predict if a cluster consists of mainly doublets `findDoubletClusters()`, but we can also predict individual cells based on simulations using the function `computeDoubletDensity()` which we will do here. Doublet detection will be performed using PCA, so we need to first normalize the data and run variable gene detection, as well as UMAP for visualization. These steps will be explored in more detail in coming exercises.

```{r}
sce.filt <- logNormCounts(sce.filt)
dec <- modelGeneVar(sce.filt, block = sce.filt$sample)
hvgs <- getTopHVGs(dec, n = 2000)

sce.filt <- runPCA(sce.filt, subset_row = hvgs)

sce.filt <- runUMAP(sce.filt, pca = 10)
```

```{r}
# run computeDoubletDensity with 10 principal components.
sce.filt <- scDblFinder(sce.filt, dims = 10)
```

```{r}
#| fig-height: 5
#| fig-width: 14
wrap_plots(
    plotUMAP(sce.filt, colour_by = "scDblFinder.score"),
    plotUMAP(sce.filt, colour_by = "scDblFinder.class"),
    plotUMAP(sce.filt, colour_by = "sample"),
    ncol = 3
)
```

{{< meta qc_doublet_3 >}}

```{r}
plotColData(sce.filt, y = "detected", x = "scDblFinder.class")

```



{{< meta qc_doublet_4 >}}

```{r}
sce.filt <- sce.filt[, sce.filt$scDblFinder.class == "singlet"]
dim(sce.filt)
```


{{< meta qc_doublet_5 >}}

```{r}
table(sce$sample)
table(sce.filt$sample)
```


## {{< meta qc_save >}}

{{< meta qc_save_1 >}}

```{r}
saveRDS(sce.filt, file.path(path_results, "bioc_covid_qc.rds"))
```

## {{< meta session >}}

<details>
  <summary>Click here</summary>

```{r}
sessionInfo()
```

</details>
