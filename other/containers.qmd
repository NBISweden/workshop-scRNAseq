---
title: Run labs in container
subtitle: Instructions on running labs in Docker or Singularity container
date: ""
author: ""
code-tools: false
format: html
engine: knitr
---

```{r}
#| echo: false
library(yaml)
library(here)
upc <- yaml::read_yaml(here("_quarto.yml"))$uppmax_compute
ups <- yaml::read_yaml(here("_quarto.yml"))$uppmax_storage
```

::: {.callout-note}
Three different toolkits, namely **Seurat** (R/RStudio), **Bioconductor** (R/RStudio) and **Scanpy** (Python/Jupyter) are available to perform the scRNAseq analysis. The labs can be run on Uppmax using Singularity (Apptainer) or on your local machine using Docker. Both options provide the necessary environment to run the analysis.  
If you use Uppmax, you do not need any local installation or setup on your system but you need an Uppmax account and become a member of the Uppmax projects. If you use Docker, you will need to set up and run Docker yourself.
:::


## **Option A:** Run Singularity on Uppmax (Recommended)

### Configure Uppmax 

#### Storage

This setup needs to be run **only once** at the beginning of the workshop. It will connect you to Uppmax and create a folder with your username in the workshop's directory.

First connect to Uppmax: 

```bash
ssh -Y <username>@rackham.uppmax.uu.se
```

Once you are connected, run the following commands:
```bash
cd /proj/naiss2023-23-648/nobackup
mkdir $(id -un) && cd $_
```

Now you can fetch the scripts for the labs. You can either download individual `.qmd` or `.ipynb` files from the [Contents](/home_contents.html) page or clone the whole repo. If you clone the repo, navigate to `compiled/labs` directory to work on labs.

```bash
git clone --depth 1 --single-branch --branch master https://github.com/nbisweden/workshop-scRNAseq.git
cd workshop-scRNAseq/compiled/labs
```

If the `git` command is not available, you can simply go to <https://github.com/NBISweden/workshop-scRNAseq> and download the repo as a zip file and unzip it in a suitable location.


#### Compute

To run the labs you need to first create an *interactive session*. 

Connect to Uppmax (if not already connected): 

```bash
ssh -Y <username>@rackham.uppmax.uu.se
```
Once connected, start an interactive session:

```bash
interactive -A naiss2023-22-1345 -p core -n 5 -t 08:00:00
```

::: {.callout-important}
Run the `interactive` command above only **ONCE** per day at the beginning of the practical session.
:::

This command will connect you to a node with 5 cores for a duration of 8 hours. You can check the *node name* under the `NODELIST` column in the output of the following command: 

```bash
squeue -u <username>
```

If you are disconnected from the interactive session, you can re-connect to your node with the following command:

```bash
ssh -Y <nodename>
```

### Launch RStudio

::: {.callout-tip}
To avoid running out of memory, restart R (_Session > Restart R_) after each lab.
:::

#### Seurat

To launch RStudio server and run the `Seurat` labs perform the following steps:

```bash
cd /path/to/labs  # replace this with the full path to the workshop compiled lab folder
/sw/courses/scrnaseq/singularity/launch_rstudio.sh /sw/courses/scrnaseq/singularity/2024-seurat-r4.3.0.sif
```

#### Bioconductor

To launch RStudio server and run the `Bioconductor` labs perform the following steps:

```bash
cd /path/to/labs  # replace this with the full path to the workshop compiled lab folder
/sw/courses/scrnaseq/singularity/launch_rstudio.sh /sw/courses/scrnaseq/singularity/2024-bioconductor-r4.3.0.sif
```

### Connect to RStudio

After executing the `launch_rstudio.sh` script, a message with **your** login credentials will be printed to your screen, and it looks similar to the one below.

::: {.callout-important}
Do not close this terminal!
:::

```
        *************************************************
        *                                               *
        *  IMPORTANT: Do not close or exit this shell!  *
        *                                               *
        *************************************************

1. SSH tunnel from your workstation using the following command:

   ssh -N -L 8787:r483.uppmax.uu.se:58359 susanner@rackham3.uppmax.uu.se

   and point your web browser to http://localhost:8787

2. log in to RStudio Server using the following credentials:

   user: susanner
   password: scrnaseq

When done using RStudio Server, terminate the job by:

1. Exit the RStudio Session ("power" button in the top right corner of the RStudio window).
2. Issue the following command in both shells:

      CTRL-C
```

Follow the instructions printed on the screen to launch the RStudio Server. Open a shell *locally* and run *your* `ssh` command from step 1. Then open [localhost:8787](localhost:8787) in your web browser and log in to the RStudio Server using **your** `username` and `password` provided in step 2.

### Launch JupyterLab

#### Scanpy

To launch JupyterLab and run the **Scanpy** labs using Jupyter notebooks perform the following steps:

::: {.callout-tip}
To avoid running out of memory, restart the kernel (_Kernel > Restart Kernel_) after each lab.
:::

```bash
cd /path/to/labs  # replace this with the full path to the workshop compiled lab folder
/sw/courses/scrnaseq/singularity/launch_jupyter.sh /sw/courses/scrnaseq/singularity/2024-scanpy-py3.10.sif
```

### Connect to JupyterLab

After executing the `launch_jupyter.sh` script, a message with *your* login credentials will be printed to your screen, and it looks similar to the one below.

::: {.callout-important}
Do not close this terminal!
:::

```
        *************************************************
        *                                               *
        *  IMPORTANT: Do not close or exit this shell!  *
        *                                               *
        *************************************************

1. SSH tunnel from your workstation using the following command:

   ssh -N -L 8888:r483.uppmax.uu.se:34968 susanner@rackham1.uppmax.uu.se

   point your web browser to http://localhost:8888/lab

2. Log in to JupyterLab using the password:

   scrnaseq

When done using JupyterLab, terminate the job by:

1. Shut down all kernels.
2. Issue the following command in both shells:

   CTRL-C
```

Follow the instructions to launch the JupyterLab. Open a shell **locally** and run **your** `ssh` command from step 1. Then open [localhost:8888/lab](localhost:8888/lab) in your web browser and log in to the JupyterLab using the password provided in step 2.

## **Option B:** Run Docker Locally

### Local Setup

Create a new directory at a suitable location. Now you can fetch the scripts for the labs. You can either download individual `.qmd` or `.ipynb` files from the [Contents](/home_contents.html) page or clone the whole repo. If you clone the repo, navigate to `compiled/labs` to work on labs.

```bash
git clone --depth 1 --single-branch --branch master https://github.com/nbisweden/workshop-scRNAseq.git
cd workshop-scRNAseq/compiled/labs
```

If the `git` command is not available, you can simply go to <https://github.com/NBISweden/workshop-scRNAseq> and download the repo as a zip file and unzip it in a suitable location.


## Images

Separate Docker images are made available for `Seurat`, `Bioconductor` and `Scanpy` toolkits. An additional set of images are available for spatial analyses. All images follow the `registry/username/image:tag` convention. The image is always `ghcr.io/nbisweden/workshop-scrnaseq`. Add the appropriate tag based on the lab you are running.

An overview of the available docker images:

|Topic|Image|
|---|---|
|Seurat|`2024-seurat-r4.3.0`|
|Seurat spatial|`2024-seurat_spatial-r4.3.0`|
|Bioconductor|`2024-bioconductor-r4.3.0`|
|Bioconductor spatial|`2024-bioconductor_spatial-r4.3.0`|
|Scanpy|`2024-scanpy-py3.10`|
|Scanpy spatial|`2024-scanpy_spatial-py3.10`|

### Seurat

::: {.callout-tip}
To avoid running out of memory, restart R (_Session > Restart R_) after each lab.
:::

```bash
cd /path/to/labs  # replace this with the full path to the workshop compiled lab folder
docker pull ghcr.io/nbisweden/workshop-scrnaseq:2024-seurat-r4.3.0
docker run --rm -ti -p 8787:8787 -e PASSWORD=scrnaseq -v ${PWD}:/home/rstudio/workdir ghcr.io/nbisweden/workshop-scrnaseq:2024-seurat-r4.3.0
```

In the browser, go to [localhost:8787](localhost:8787).  
Use the following credentials to log in to the RStudio Server:  

> User: `rstudio`  
> Password: `scrnaseq`

Navigate to `/home/rstudio/workdir/` and open qmd files

::: {layout-ncol="2"}

![RStudio login screen](assets/rstudio-login.jpg)

![RStudio preview](assets/rstudio-preview.jpg)

:::

### Bioconductor

::: {.callout-tip}
To avoid running out of memory, restart R (_Session > Restart R_) after each lab.
:::

```bash
cd /path/to/labs  # replace this with the full path to the workshop compiled lab folder
docker pull ghcr.io/nbisweden/workshop-scrnaseq:2024-bioconductor-r4.3.0
docker run --rm -ti -p 8787:8787 -e PASSWORD=scrnaseq -v ${PWD}:/home/rstudio/workdir ghcr.io/nbisweden/workshop-scrnaseq:2024-bioconductor-r4.3.0
```

In the browser, go to [localhost:8787](localhost:8787). Use the following credentials to log in to the RStudio Server:  

> User: `rstudio`  
> Password: `scrnaseq`

Navigate to `/home/rstudio/workdir/` and open qmd files

::: {.callout-important}
Do not close this terminal.
:::

### Scanpy

::: {.callout-tip}
To avoid running out of memory, restart the kernel (_Kernel > Restart Kernel_) after each lab.
:::

```bash
cd /path/to/labs  # replace this with the full path to the workshop compiled lab folder
docker pull ghcr.io/nbisweden/workshop-scrnaseq:2024-scanpy-py3.10
docker run --rm -ti -p 8888:8888 -v ${PWD}:/home/jovyan/workdir ghcr.io/nbisweden/workshop-scrnaseq:2024-scanpy-py3.10
```

At the end of the prompt, you will see a URL that starts with `http://127.0.0.1`, similar to the one below:

```
http://127.0.0.1:8888/lab?token=0a1d9ec51b91528a1d1fe2ad2c74f59ecb94c47070c2911d
```

Note that your token value will be different. Copy the entire URL (with the token) and paste it in your browser. 

::: {layout-ncol="2"}

![Jupyter home](assets/jupyter-home.jpg)

![Jupyter preview](assets/jupyter-preview.jpg)

:::

::: {.callout-important}
Do not close this terminal.
:::
