---
title: Differential Gene Expression
author: Jennifer Fransson
format:
  revealjs:
    df-print: kable
execute:
  echo: false
bibliography: references.bib
transition: none
---


## Setup {visibility="hidden"}

```{r library}
#| include: false

library(Seurat)
library(ggplot2)
library(dplyr)
library(cowplot)
library(ggpubr)

theme_set(theme_minimal(base_size=10))
options(ggplot2.discrete.colour= c("#1f78b4", "#e31a1c", "#33a02c", "#ff7f00", "#6a3d9a"),
        ggplot2.discrete.fill= c("#1f78b4", "#e31a1c", "#33a02c", "#ff7f00", "#6a3d9a"))
```

```{r dimred}
obj <- NormalizeData(pbmc_small) %>%
  ScaleData() %>%
  RunPCA() %>%
  RunUMAP(dims=1:3) %>%
  FindNeighbors() %>%
  FindClusters(res=1.2)
m <- FindAllMarkers(obj)
```


## Overview

- What is differential gene expression?
- How is the analysis performed?
  - Choosing your groups of interest
  - Functions
  - Simple design vs complex design
  - 1-vs-1 and 1-vs-all
- Other considerations

# What is differential gene expression?

## What is differential gene expression?

```{r diffexp_1}
#| fig-height: 4
#| fig-width: 8

set.seed(42)

n <- 30
dfr <- data.frame(cluster=rep(c(rep("C1",n),rep("C2",n)),3), gene=rep(c("CD79A","FOX1","MS41A"),each=n*2), norm_expression=c(rnorm(n,3,0.5),rnorm(n,1,0.5),rnorm(n,1,0.5),rnorm(n,3,0.5),rnorm(n,1.8,0.5),rnorm(n,2.2,0.5)))

ggplot(dfr, aes(x=cluster, y=norm_expression))+
  #geom_violin(aes(fill=cluster))+
  geom_jitter(aes(color=cluster), alpha=0.8)+
  facet_wrap(~gene) + 
  theme(panel.spacing.x = unit(30, "pt"))
```


Count data -> statistical analysis -> Are differences significant (greater than expected randomly)


:::{.notes}
Sometimes, it's easy to visually identify if the expression of a gene is significantly different between groups and in which direction. If the samples overlap or the spread is too high, it might be harder.

:::



## Statistical tests

- Null hypothesis: Mean/median/distribution is equal between group A and group B
- $p$ < 0.05 : if null hypothesis is true, we can expect the measured result in < 5% of cases where group A and group B have been sampled with sample size $n$


```{r whatissignificant, fig.width = 8, fig.height = 3}


set.seed(42)


n = 1000000
normdata = data.frame(
  value = c(rnorm(n, 10, 1),
        rnorm(n, 12, 1)),
  group = rep(c("A","B"), each = n)
)



normdata_same = data.frame(
  value = c(rnorm(n, 11, 1),
        rnorm(n, 11, 1)),
  group = rep(c("B","A"), each = n)
)


plot_grid(
  ggplot(normdata, aes(y = value)) + 
    geom_density(aes(fill = group, color = group), alpha = 0.5) + 
    lims(y = c(5,16)),
  ggplot(normdata[sample(1:nrow(normdata),50),], aes(y = value)) + 
    geom_jitter(aes(x = group, color = group)) + 
    lims(y = c(5,16)),
  ggplot(normdata_same, aes(y = value)) + 
    geom_density(aes(fill = group, color = group, linetype = group), alpha = 0.5) + 
    geom_density(aes(color = group, linetype = group), fill = NA) + 
    scale_linetype_manual(values = c(A = 1, B = 2)) + 
    lims(y = c(5,16)),
  ncol = 3,
  rel_widths = c(2,3,2)
)


```

- *Statistical* significance: The result is likely to be from a true difference rather than random chance


:::{.notes}
You still need to decide whether the results are valuable to your research question (e.g. biological relevance).


:::

## What is differential gene expression?

```{r de_res_nopct}
head(m, n=10) %>%
  select(avg_log2FC, p_val_adj)
```

## What is differential gene expression?

::: {.columns}  
::: {.column}

```{r zeroexample}
#| fig-height: 4
#| fig-width: 5
n <- 30
dfr <- data.frame(cluster=c(rep("C1",n),rep("C2",n)), gene=rep("CD79A",n*2), norm_expression=c(rnorm(n-5,4,0.3),rep(0,5),rnorm(n-20,4,0.3),rep(0,20)))

ggplot(dfr, aes(x=cluster, y=norm_expression))+
  geom_jitter(alpha=0.8)+
  facet_wrap(~gene)
```

:::
::: {.column}


:::{.fragment}

```{r zeroexample_vln}
#| fig-height: 4
#| fig-width: 6
ggplot(dfr, aes(x=cluster, y=norm_expression))+
  geom_violin(aes(fill=cluster))+
  geom_jitter(alpha=0.8)+
  facet_wrap(~gene)
```

:::

:::
:::


## What is differential gene expression?



```{r de_res}
head(m, n=10) %>%
  select(avg_log2FC, p_val_adj, pct.1, pct.2)
```

:::{.notes}
The result is typically a table like this. You get the fold-change as an indication of the difference (positive or negative), the p-value to indicate significance, and the percentage of cells that express the gene in each tested group. 

You can still miss bimodal distributions if the "negative" part is > 0
:::



## What is differential gene expression?


::: {.columns}
::: {.column width="60%"}


![](assets/distributions_Tiberi_2023.png)

:::{.small}
[Modified from @tiberi2023distinct]
:::

:::
::: {.column width="40%"}

- Most methods focus on difference in mean
- Many different distributions will show a difference in means
  - But not all!

:::

:::


# How is the analysis performed?

## Defining groups of interest

::: {.columns}

::: {.column width="40%"}
- *A priori* defined groups: Compare cells from different samples, e.g.:
  - Experimental groups (treatment, time points, clinical information etc)
  - Sorted cells

```{r}
DimPlot(obj, group.by = "groups") + theme(plot.title = element_blank())
```

:::

::: {.column width="40%"}
- Data-driven definition: Compare cells depending on analysis output, e.g.:
  - RNA-based clustering/identity
  - Identity based on other data from multi-omics
  
```{r}
DimPlot(obj, group.by = "seurat_clusters") + theme(plot.title = element_blank())
```
  
  
:::

:::

*Warning: Performing DE on clusters defined with the same data ("double-dipping") will inflate DE analysis. Be mindful of this when you interpret the results.*


## Functions

|Toolkit|Function|
|:---|:---|
|{{< fa brands r-project >}} Seurat|`FindMarkers()`, `FindAllMarkers()`|
|{{< fa brands r-project >}} Scran|`findMarkers()`|
|{{< fa brands python >}} Scanpy|`scanpy.tl.rank_genes_groups()`|


## FindAllMarkers

```{r findallmarkers_nohighlight}
#| eval: false
#| echo: true

FindAllMarkers(
  object,
  assay = NULL,
  features = NULL,
  logfc.threshold = 0.1,
  test.use = "wilcox",
  slot = "data",
  min.pct = 0.01,
  min.diff.pct = -Inf,
  node = NULL,
  verbose = TRUE,
  only.pos = FALSE,
  max.cells.per.ident = Inf,
  random.seed = 1,
  latent.vars = NULL,
  min.cells.feature = 3,
  min.cells.group = 3,
  mean.fxn = NULL,
  fc.name = NULL,
  base = 2,
  return.thresh = 0.01,
  densify = FALSE,
  ...
)
```

[Seurat 5.1.0]{.small}

:::{.notes}
FindAllMarkers() does a 1 vs rest comparison for all Identities.
:::



## FindAllMarkers

```{r findallmarkers_1}
#| eval: false
#| echo: true
#| code-line-numbers: "3,7"

FindAllMarkers(
  object,
  assay = NULL,
  features = NULL,
  logfc.threshold = 0.1,
  test.use = "wilcox",
  slot = "data",
  min.pct = 0.01,
  min.diff.pct = -Inf,
  node = NULL,
  verbose = TRUE,
  only.pos = FALSE,
  max.cells.per.ident = Inf,
  random.seed = 1,
  latent.vars = NULL,
  min.cells.feature = 3,
  min.cells.group = 3,
  mean.fxn = NULL,
  fc.name = NULL,
  base = 2,
  return.thresh = 0.01,
  densify = FALSE,
  ...
)
```

[Seurat 5.1.0]{.small}

:::{.notes}
`assay` "must" be RNA. `slot` is usually data.
:::



## FindAllMarkers

```{r findallmarkers_2}
#| eval: false
#| echo: true
#| code-line-numbers: "5,8,9,12,16,17"

FindAllMarkers(
  object,
  assay = NULL,
  features = NULL,
  logfc.threshold = 0.1,
  test.use = "wilcox",
  slot = "data",
  min.pct = 0.01,
  min.diff.pct = -Inf,
  node = NULL,
  verbose = TRUE,
  only.pos = FALSE,
  max.cells.per.ident = Inf,
  random.seed = 1,
  latent.vars = NULL,
  min.cells.feature = 3,
  min.cells.group = 3,
  mean.fxn = NULL,
  fc.name = NULL,
  base = 2,
  return.thresh = 0.01,
  densify = FALSE,
  ...
)
```

[Seurat 5.1.0]{.small}


## FindAllMarkers

```{r findallmarkers_3}
#| eval: false
#| echo: true
#| code-line-numbers: "6"

FindAllMarkers(
  object,
  assay = NULL,
  features = NULL,
  logfc.threshold = 0.1,
  test.use = "wilcox",
  slot = "data",
  min.pct = 0.01,
  min.diff.pct = -Inf,
  node = NULL,
  verbose = TRUE,
  only.pos = FALSE,
  max.cells.per.ident = Inf,
  random.seed = 1,
  latent.vars = NULL,
  min.cells.feature = 3,
  min.cells.group = 3,
  mean.fxn = NULL,
  fc.name = NULL,
  base = 2,
  return.thresh = 0.01,
  densify = FALSE,
  ...
)
```

[Seurat 5.1.0]{.small}




## Statistical tests

```{yaml}
#| eval: false
#| echo: true
#| code-line-numbers: "1,7"
#| 
"wilcox" : Identifies differentially expressed genes between two groups of cells using a Wilcoxon Rank Sum test (default)

"bimod" : Likelihood-ratio test for single cell gene expression, (McDavid et al., Bioinformatics, 2013)

"roc" : Identifies 'markers' of gene expression using ROC analysis. For each gene, evaluates (using AUC) a classifier built on that gene alone, to classify between two groups of cells. An AUC value of 1 means that expression values for this gene alone can perfectly classify the two groupings (i.e. Each of the cells in cells.1 exhibit a higher level than each of the cells in cells.2). An AUC value of 0 also means there is perfect classification, but in the other direction. A value of 0.5 implies that the gene has no predictive power to classify the two groups. Returns a 'predictive power' (abs(AUC-0.5) * 2) ranked matrix of putative differentially expressed genes.

"t" : Identify differentially expressed genes between two groups of cells using the Student's t-test.

"negbinom" : Identifies differentially expressed genes between two groups of cells using a negative binomial generalized linear model. Use only for UMI-based datasets

"poisson" : Identifies differentially expressed genes between two groups of cells using a poisson generalized linear model. Use only for UMI-based datasets

"LR" : Uses a logistic regression framework to determine differentially expressed genes. Constructs a logistic regression model predicting group membership based on each feature individually and compares this to a null model with a likelihood ratio test.

"MAST" : Identifies differentially expressed genes between two groups of cells using a hurdle model tailored to scRNA-seq data. Utilizes the MAST package to run the DE testing.

"DESeq2" : Identifies differentially expressed genes between two groups of cells based on a model using DESeq2 which uses a negative binomial distribution (Love et al, Genome Biology, 2014).This test does not support pre-filtering of genes based on average difference (or percent detection rate) between cell groups. However, genes may be pre-filtered based on their minimum detection rate (min.pct) across both cell groups. To use this method, please install DESeq2, using the instructions at https://bioconductor.org/packages/release/bioc/html/DESeq2.html
```

## Statistical tests

```{yaml}
#| eval: false
#| echo: true
#| code-line-numbers: "9,11,17"
#| 
"wilcox" : Identifies differentially expressed genes between two groups of cells using a Wilcoxon Rank Sum test (default)

"bimod" : Likelihood-ratio test for single cell gene expression, (McDavid et al., Bioinformatics, 2013)

"roc" : Identifies 'markers' of gene expression using ROC analysis. For each gene, evaluates (using AUC) a classifier built on that gene alone, to classify between two groups of cells. An AUC value of 1 means that expression values for this gene alone can perfectly classify the two groupings (i.e. Each of the cells in cells.1 exhibit a higher level than each of the cells in cells.2). An AUC value of 0 also means there is perfect classification, but in the other direction. A value of 0.5 implies that the gene has no predictive power to classify the two groups. Returns a 'predictive power' (abs(AUC-0.5) * 2) ranked matrix of putative differentially expressed genes.

"t" : Identify differentially expressed genes between two groups of cells using the Student's t-test.

"negbinom" : Identifies differentially expressed genes between two groups of cells using a negative binomial generalized linear model. Use only for UMI-based datasets

"poisson" : Identifies differentially expressed genes between two groups of cells using a poisson generalized linear model. Use only for UMI-based datasets

"LR" : Uses a logistic regression framework to determine differentially expressed genes. Constructs a logistic regression model predicting group membership based on each feature individually and compares this to a null model with a likelihood ratio test.

"MAST" : Identifies differentially expressed genes between two groups of cells using a hurdle model tailored to scRNA-seq data. Utilizes the MAST package to run the DE testing.

"DESeq2" : Identifies differentially expressed genes between two groups of cells based on a model using DESeq2 which uses a negative binomial distribution (Love et al, Genome Biology, 2014).This test does not support pre-filtering of genes based on average difference (or percent detection rate) between cell groups. However, genes may be pre-filtered based on their minimum detection rate (min.pct) across both cell groups. To use this method, please install DESeq2, using the instructions at https://bioconductor.org/packages/release/bioc/html/DESeq2.html
```

:::{.notes}
wilcox: non-parametric, fast, no covariates
t-test: normal distribution, fast, no covariates
mast: parametric, slow, complex modelling
negbinom: neg bionomial distribution, only umi data
poisson: poisson distribution, only umi data
:::

## Distributions

::: {.columns}
::: {.column}

![](assets/distributions.png)

:::
::: {.column}

- High noise (technical + biology)
- Low library sizes
- Low mRNA quantity
- Amplification bias, drop-outs
- 3' bias, partial coverage
- Bursting
- Mixed cell types

:::
:::

:::{.notes}
What distribution is single-cell data?
Distributions differ gene to gene.

Data is zero inflated.
Some distributions capture this closely: ZINB, Poisson-Beta
:::

## Statistical tests

```{yaml}
#| eval: false
#| echo: true
#| code-line-numbers: "15"
#| 
"wilcox" : Identifies differentially expressed genes between two groups of cells using a Wilcoxon Rank Sum test (default)

"bimod" : Likelihood-ratio test for single cell gene expression, (McDavid et al., Bioinformatics, 2013)

"roc" : Identifies 'markers' of gene expression using ROC analysis. For each gene, evaluates (using AUC) a classifier built on that gene alone, to classify between two groups of cells. An AUC value of 1 means that expression values for this gene alone can perfectly classify the two groupings (i.e. Each of the cells in cells.1 exhibit a higher level than each of the cells in cells.2). An AUC value of 0 also means there is perfect classification, but in the other direction. A value of 0.5 implies that the gene has no predictive power to classify the two groups. Returns a 'predictive power' (abs(AUC-0.5) * 2) ranked matrix of putative differentially expressed genes.

"t" : Identify differentially expressed genes between two groups of cells using the Student's t-test.

"negbinom" : Identifies differentially expressed genes between two groups of cells using a negative binomial generalized linear model. Use only for UMI-based datasets

"poisson" : Identifies differentially expressed genes between two groups of cells using a poisson generalized linear model. Use only for UMI-based datasets

"LR" : Uses a logistic regression framework to determine differentially expressed genes. Constructs a logistic regression model predicting group membership based on each feature individually and compares this to a null model with a likelihood ratio test.

"MAST" : Identifies differentially expressed genes between two groups of cells using a hurdle model tailored to scRNA-seq data. Utilizes the MAST package to run the DE testing.

"DESeq2" : Identifies differentially expressed genes between two groups of cells based on a model using DESeq2 which uses a negative binomial distribution (Love et al, Genome Biology, 2014).This test does not support pre-filtering of genes based on average difference (or percent detection rate) between cell groups. However, genes may be pre-filtered based on their minimum detection rate (min.pct) across both cell groups. To use this method, please install DESeq2, using the instructions at https://bioconductor.org/packages/release/bioc/html/DESeq2.html
```


## Hurdle models

> ...most computational methods still stick with the old mentality of viewing differential expression as a simple ‘up or down’ phenomenon. We advocate that we should fully embrace the features of single cell data, which allows us to observe binary (from Off to On) as well as continuous (the amount of expression) regulations. @wu2018two

:::{.notes}
But single cell expression looks more like this. With lots of zeros. Now, it's harder to say if the difference is significant. Apart from the level of expression, the number of samples (cells) that express the gene also becomes relevant. If we only look at expression level, they might be similar, but if we look at number of cells, one might be higher than the other.
:::

. . .

MAST

- Two part GLM (Hurdle model)
- Models the continuous nature of gene expression and the discrete binary nature of gene detection
- Detection hurdle
  - Expression detected or not?
  - Logistic regression
  - If gene is not detected, stop, else move to next hurdle
- Expression hurdle
  - Genes with positive expression levels modelled using GLM
- Hurdle model is able to handle drop-outs
- Support complex modelling

[@finak2015mast]{.small}



:::{.notes}
BEFORE next slide:
All of these methods can be used when you have a simple design of one group of independent cells vs another group of independent cells. However, experimental designs typically need to be more complex than this in order to draw reliable conclusions about biology.
:::




## Complex designs

- Comparing groups of samples (e.g. patients vs controls)
- Including batch effects
- Correcting for covariates (e.g. age)

## Complex designs: Groups of samples

::: {.columns}

Example: 3 patients vs 3 controls

$n$: Number of cells (1000s) or number of individuals (3)?

:::

```{r}
set.seed(654321)

testdata_ctrl = do.call("rbind",lapply(
  1:3,
  function(i){
    data.frame(group = "ctrl",
               individual = paste0("ctrl",i),
               value = rnorm(300, 5, 1))}))

testdata_pat = do.call("rbind",list(
    data.frame(group = "pat",
               individual = "pat1",
               value = rnorm(300, 5, 1)),
    data.frame(group = "pat",
               individual = "pat2",
               value = rnorm(300, 5, 1)),
    data.frame(group = "pat",
               individual = "pat3",
               value = rnorm(300, 7, 1))
    ))
```


::: {.columns}

::: {.column width="35%"}


```{r simple_complex, fig.height=4, fig.width=3}


ggplot(rbind(testdata_ctrl,testdata_pat), 
       aes(x = group, y = value, color = group)) +
  geom_jitter(shape = 16, alpha = 0.5, size = 0.5) + 
  ggpubr::stat_compare_means( size =3) +  
  geom_violin(fill = NA, color = "black") + 
  theme(legend.position = "none") +
  scale_y_continuous(expand = expansion(mult = c(0.1,0.2)))

```

:::

::: {.column width="65%"}

::: {.fragment}

```{r individuals, fig.height=4, fig.width=5}


ggplot(rbind(testdata_ctrl,testdata_pat), aes(x = individual, y = value, color = group)) +
  geom_jitter(shape = 16, alpha = 0.5, size = 1) + 
  geom_violin(fill = NA, color = "black") + 
  theme(legend.position = "none") +
  scale_y_continuous(expand = expansion(mult = c(0.1,0.2)))



```

:::

:::
:::


. . .

Many tests assume independence!

## Complex designs: Approaches


```{r complexapproaches}


## Random data

cells = data.frame(expression = c(rnorm(100,9), rnorm(100,10)),
                   group = rep(c("a","b"), each = 100))
cells$batch = "batch1"
cells$batch[cells$group == "a" & cells$expression > 9] = "batch2"
cells$batch[cells$group == "b" & cells$expression > 10] = "batch2"

cells$individual = paste0(cells$group, sample(c(1,2,3), 200, replace = TRUE))


othergenes = as.data.frame(lapply(1:100, function(i){round(rnorm(100, 50,10))}))
colnames(othergenes) = paste0("gene",1:100)
fulldata = cbind(cells, othergenes) %>%
  mutate(library = rowSums(.[-(2:4)]))
fulldata$expression = round(fulldata$expression^2-1)


fulldata_norm = fulldata %>%
  mutate(expression = log2(expression/library*1000+1))



## Pseudo pseudobulk

pseudobulk = fulldata  %>%
  group_by(individual, group) %>%
  summarize(expression = sum(expression), library  = sum(library)) %>%
  mutate(pseudo = log2(expression/library*1000+1))


## Plots

plottheme = theme(plot.subtitle = element_text(size = 8),
          plot.title = element_text(size = 12),
          axis.title = element_text(size = 8))

plot_grid(
  ggplot(fulldata_norm, aes(x = group, y = expression)) + geom_jitter() +
    labs(title = "Naive model (simple design)", 
         subtitle = "Assumes independence within groups") + 
    plottheme
  ,
  ggplot(fulldata_norm, aes(x = group, y = expression, color = batch)) + geom_jitter() +
    labs(title = "Generalized linear model / latent variables", 
         subtitle = "Considers potential covariates when comparing cells") + 
    plottheme
  ,
  ggplot(fulldata_norm, aes(x = individual, y = expression, color = group)) + geom_jitter(width = 0.2) +
    labs(title = "Mixed model", 
         subtitle = "Considers cells non-independent within groups") + 
    plottheme
  ,
  ggplot(fulldata_norm, aes(x = individual, y = expression, color = group)) + geom_jitter(width = 0.2, alpha = 0.4) + 
    geom_point(data = pseudobulk, aes(y = pseudo, fill = group) , size = 4, shape = 21, color = "black") +
    labs(title = "Pseudobulk", 
         subtitle = "Reduces sample expression distribution to normalized sums") + 
    plottheme,
  align = "hv"
)

```


## Complex designs: Approaches

| Approach | Speed | Can include covariates | Can account for multilevel design | Sensitivity | Specificity |
| --- | -- | --- | --- | -- | -- |
| Naive model | Fast | &#x2716; | &#x2716; | High | Low |
| GLM | Slow | &#x2713; | Not recommended | High | Low |
| Mixed models | Slow | &#x2713; | &#x2713; | Medium | Medium |
| Pseudobulk | Fast | &#x2713; | &#x2713; | Low | High |
<br>
<br>
*NB: This table broadly summarizes each approach, but each approach includes many methods with their own advantages and disadvantages.*

Further reading: 
@soneson2018bias
@juntilla2022benchmarking
@das20222challenges


## 1-vs-1 and 1-vs-all

::: {.columns}
::: {.column width="40%"}

```{r simpledesign_datadriven}
#| fig-height: 6
#| fig-width: 6
UMAPPlot(obj, group.by = "seurat_clusters", pt.size = 1.5)  + 
  theme(axis.text = element_blank(), 
        axis.ticks = element_blank())
```

:::

::: {.column width="60%"}

- 1-vs-1: C1 vs C2
- 1-vs-all: C1 vs C0 + C2 + C3

:::
:::


## 1-vs-all analysis


::: {.columns}
::: {.column}
![](assets/unbalanced-clusters-2.png)
:::

::: {.column}
- Larger clusters will be over-represented unless subsampled
- Highly similar clusters
  - Will have most of their DEGs overlapping
  - Pairwise comparisons might help rather than 1 vs rest
:::

:::

:::{.notes}
When doing a C4 vs all comparison, very few DEGs are found because Clusters 1 and 4 might share a lot of similar genes. 
Cluster C3 vs all will be mostly C3 vs C1 because C1 dominates the second group. Subsample to bring all clusters to equal number of cells.
:::

# Other considerations


## Considerations - what does the p-value mean?

- $p$ depends on $n$, variance and intergroup difference
  - As $n$ increases, variance can increase and difference can decrease without losing power

```{r pvalueexample, fig.height=4, fig.width=6}

set.seed(654321)

testdata = do.call("rbind",lapply(
  list(list(n = 1000, diff = 0.2),
       list(n = 20, diff = 0.2),
       list(n = 20, diff = 2)),
  function(x){
    rbind(
      data.frame(group = "A", 
                 n = paste0("n = ",x$n),
                 diff = paste0("diff. in pop. means = ",x$diff),
                 sd = "sd = 1",
                 value = rnorm(x$n, 5, 1)),
      data.frame(group = "B", 
                 n = paste0("n = ",x$n),
                 diff = paste0("diff. in pop. means = ",x$diff),
                 sd = "sd = 1",
                 value = rnorm(x$n, 5+x$diff, 1))
      )
    }))
testdata$n = factor(testdata$n, levels = paste0("n = ", c(20, 1000)))

ggplot(testdata, aes(x = group, y = value)) +
  geom_jitter(shape = 16, alpha = 0.5, size = 1) + 
  geom_violin(fill = "white", alpha = 0.5) +
  facet_wrap(c("n","diff","sd")) + 
  ggpubr::stat_compare_means( size =3, label.y = 10) + 
  theme(strip.text = element_text(size = 9), 
        strip.background = element_rect(color = NA, fill = "#DDDDDD"),
        panel.spacing = unit(10, "pt")) +
  scale_y_continuous(expand = expansion(mult = c(0.1,0.2)))


```

Are all statistically significant differences of interest for your research question?

:::{.notes}
Not as simple as setting a threshold for difference - variance also matters
:::


## Considerations: Composition vs expression


:::{.columns}

:::{.column width="30%"}

```{r composition}
#| fig-height: 6
#| fig-width: 6

obj$sample = sample(c("1","2"), ncol(obj), replace = TRUE)
obj$sample[obj$seurat_clusters == 1] = "2"

UMAPPlot(obj, group.by = "sample", pt.size = 1.5) + 
  labs(color = "Sample", title = "") + 
  theme(axis.text = element_blank(), 
        axis.ticks = element_blank())

```
:::
:::{.column width="30%"}

```{r composition_de}
#| fig-height: 6
#| fig-width: 6


FindMarkers(SetIdent(obj, value = "sample"), ident.1 = "2", ident.2 = "1") %>%
  select(avg_log2FC, p_val_adj, pct.1, pct.2) %>%
  head(5)

VlnPlot(obj, "S100A8", group.by = "sample")



```


:::
:::{.column width="30%"}

```{r, fig.height = 4, fig.width = 3}
ggplot(obj@meta.data, aes(x = sample)) + 
  geom_bar(aes(fill = as.factor(seurat_clusters)), position = "fill") + 
  labs(fill = "Cluster")


```

:::
:::



## Assessing results

- Methods are hard to evaluate - we don't know the ground truth
  - Using known data (positive controls)
  - Simulated data by modelling
- Intersect of multiple methods
- Visual inspection

## Assessing results


::: {.columns}

::: {.column width="50%"}

![](assets/violin.png)

Violin plots are good to visualize distribution

:::{.notes}
- Violin plots are great to visually confirm DGE results
- Gm15645: Significant DEG
- Lgals2, Pla2g4a: Not convincing
- Sp110: Low fold change?
- Ly6g6e: Multiple distributions?
:::

:::

::: {.column width="50%"}


```{r, fig.height=5, fig.width = 5}

top10 = m %>% filter(avg_log2FC > 0) %>% group_by(cluster) %>% slice_min(p_val_adj, n = 5)

DotPlot(obj, rev(unique(top10 %>% pull(gene)))) + 
  coord_flip() + 
  theme(axis.text = element_text(size = 10),
        legend.text = element_text(size = 10),
        legend.title = element_text(size = 10),
        axis.title = element_text(size = 10)) + 
  scale_size_continuous(range = c(0,5)) + 
  labs(x = "Cluster")

```

Dot plots give a quick overview of both expression and % of cells expressing a gene


:::

:::

## Things to think about

- How many cells/samples do I need for reliable DGE?
  - How different do I expect my cells/samples to be?
  - How high is the expression and how deep am I sequencing?
  - Will also depend on library quality
- Which test should I use?
  - Which populations am I comparing?
  - Are cells independent within my groups of interest?
  - Do I need to correct for any batch effects?
- Which data should I use? Raw? Normalized? Log Normalized?
  - Depends on test/method
- Check that DEGs are not just a result of some batch effect
  - Batch effects can be corrected using latent variables
- DE results are always relative to other cells
- Don't just rely on p-values
- Always assess your results!
  - Visualize the full distributions
  - Check for potential confounders

## Conclusions

- Single cell data is more complex than differences in mean expression
- Different tests rely on different assumptions
- Always consider what you are trying to compare
- Important to assess and validate the results

## References

::: {#refs}
:::

## Acknowledgements

Slides adapted from previous presentations by Olga Dethlefson, Åsa Björklund, Vincent van Hoef and Roy Francis.
